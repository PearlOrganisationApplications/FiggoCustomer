Index: app/src/main/java/com/pearlorganisation/figgo/CurrentMap/MapsActivity2.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.pearlorganisation.figgo.CurrentMap\r\n\r\nimport android.annotation.SuppressLint\r\nimport android.app.ProgressDialog\r\nimport android.content.Intent\r\nimport android.os.Bundle\r\nimport android.util.Log\r\nimport android.widget.ImageView\r\nimport android.widget.RatingBar\r\nimport android.widget.TextView\r\nimport android.widget.Toast\r\nimport androidx.appcompat.app.AppCompatActivity\r\nimport com.android.volley.AuthFailureError\r\nimport com.android.volley.Response\r\nimport com.android.volley.VolleyError\r\nimport com.android.volley.toolbox.JsonObjectRequest\r\nimport com.android.volley.toolbox.Volley\r\nimport com.google.android.gms.maps.CameraUpdateFactory\r\nimport com.google.android.gms.maps.GoogleMap\r\nimport com.google.android.gms.maps.OnMapReadyCallback\r\nimport com.google.android.gms.maps.SupportMapFragment\r\nimport com.google.android.gms.maps.model.LatLng\r\nimport com.google.android.gms.maps.model.Marker\r\nimport com.google.android.gms.maps.model.MarkerOptions\r\nimport com.pearlorganisation.PrefManager\r\nimport com.pearlorganisation.figgo.R\r\nimport com.pearlorganisation.figgo.databinding.ActivityMaps2Binding\r\nimport com.squareup.picasso.Picasso\r\nimport org.json.JSONObject\r\n\r\nclass MapsActivity2 : AppCompatActivity(), OnMapReadyCallback, GoogleMap.OnMarkerClickListener {\r\n\r\n    private lateinit var mMap: GoogleMap\r\n    private lateinit var binding: ActivityMaps2Binding\r\n    lateinit var pref:PrefManager\r\n\r\n    var activavehiclenumber:TextView? = null\r\n    var dl_number:TextView? = null\r\n    var drivername:TextView? = null\r\n    var mobilenumber:TextView? = null\r\n    var activaimg:ImageView? = null\r\n    var  driverimg:ImageView? = null\r\n    var ride_service_rating:RatingBar? = null\r\n\r\n    override fun onCreate(savedInstanceState: Bundle?) {\r\n        super.onCreate(savedInstanceState)\r\n        binding = ActivityMaps2Binding.inflate(layoutInflater)\r\n        setContentView(binding.root)\r\n        pref  = PrefManager(this)\r\n        var shareimg = findViewById<ImageView>(R.id.shareimg)\r\n        var backimg = findViewById<ImageView>(R.id.backimg)\r\n        var accept = findViewById<TextView>(R.id.accept)\r\n        var backtxt = findViewById<TextView>(R.id.backtxt)\r\n        var mobilenumber = findViewById<TextView>(R.id.mobilenumber)\r\n         activaimg = findViewById<ImageView>(R.id.activaimg)\r\n         activavehiclenumber = findViewById<TextView>(R.id.activavehiclenumber)\r\n         drivername = findViewById<TextView>(R.id.drivername)\r\n         ride_service_rating = findViewById<RatingBar>(R.id.ride_service_rating)\r\n         dl_number = findViewById<TextView>(R.id.dl_number)\r\n        driverimg = findViewById<ImageView>(R.id.driverimg)\r\n\r\n\r\n      /*  getmaps()*/\r\n\r\n        accept.setOnClickListener {\r\n            startActivity(Intent(this, EmergencyMapsActivity::class.java))\r\n        }\r\n\r\n        backtxt.setOnClickListener {\r\n            startActivity(Intent(this, MapsActivity1::class.java))\r\n        }\r\n\r\n        backimg.setOnClickListener {\r\n            val intent = Intent(this, MapsActivity1::class.java)\r\n            startActivity(intent)\r\n        }\r\n\r\n        shareimg.setOnClickListener {\r\n            var intent= Intent()\r\n            intent.action= Intent.ACTION_SEND\r\n            intent.putExtra(Intent.EXTRA_TEXT,\"I am Inviting you to join  Figgo App for better experience to book cabs\")\r\n            intent.setType(\"text/plain\")\r\n            startActivity(Intent.createChooser(intent, \"Invite Friends\"));\r\n        }\r\n\r\n        // Obtain the SupportMapFragment and get notified when the map is ready to be used.\r\n        val mapFragment = supportFragmentManager\r\n            .findFragmentById(R.id.map) as SupportMapFragment\r\n        mapFragment.getMapAsync(this)\r\n    }\r\n\r\n\r\n    override fun onMapReady(googleMap: GoogleMap) {\r\n        mMap = googleMap\r\n        val myLocation = LatLng(30.302810, 78.012234)\r\n        mMap.addMarker(MarkerOptions().position(myLocation).title(\"Marker in Sydney\"))\r\n        mMap.moveCamera(CameraUpdateFactory.newLatLng(myLocation))\r\n    }\r\n\r\n    override fun onMarkerClick(p0: Marker): Boolean {\r\n        TODO(\"Not yet implemented\")\r\n    }\r\n\r\n    private fun getmaps() {\r\n        val progressDialog = ProgressDialog(this)\r\n        progressDialog.show()\r\n        val URL =\"https://test.pearl-developer.com/figo/api/ride/get-driver\"\r\n        Log.d(\"SendData\", \"URL===\" + URL)\r\n        val queue = Volley.newRequestQueue(this)\r\n        val json = JSONObject()\r\n        json.put(\"driver_id\", pref.getdriver_id())\r\n        Log.d(\"SendData\", \"json===\" + json)\r\n        val jsonOblect: JsonObjectRequest = object : JsonObjectRequest(Method.POST, URL, json, object : Response.Listener<JSONObject?>{\r\n                @SuppressLint(\"SuspiciousIndentation\")\r\n                override fun onResponse(response: JSONObject?) {\r\n                    Log.d(\"SendData\", \"response===\" + response)\r\n\r\n                    if (response != null) {\r\n                        progressDialog.hide()\r\n                        val dataobject = response.getJSONObject(\"data\")\r\n                        val driverObject = dataobject.getJSONObject(\"driver\")\r\n                        val driverName = driverObject.getString(\"name\")\r\n                        val dlNumber = driverObject.getString(\"dl_number\")\r\n                        val rating = driverObject.getString(\"rating_avg\")\r\n                        val vNumber = dataobject.getString(\"v_number\")\r\n                        val docObject = driverObject.getJSONObject(\"documents\")\r\n                        val driver_image = docObject.getString(\"driver_image\")\r\n                        val taxi_image = docObject.getString(\"taxi_image\")\r\n                        activavehiclenumber?.setText(vNumber)\r\n                        drivername?.setText(driverName)\r\n                        dl_number?.setText(dlNumber)\r\n                        ride_service_rating?.rating = rating.toFloat()\r\n\r\n                        if(!driver_image.equals(\"\")){\r\n                            Picasso.get().load(driver_image).placeholder(R.drawable.girl_img).into(driverimg)\r\n                        }\r\n\r\n                        if(!taxi_image.equals(\"\")){\r\n                            Picasso.get().load(taxi_image).placeholder(R.drawable.blueactiva_img).into(activaimg)\r\n                        }\r\n\r\n                    }\r\n\r\n                }\r\n            }, object : Response.ErrorListener {\r\n                override fun onErrorResponse(error: VolleyError?) {\r\n                    Log.d(\"SendData\", \"error===\" + error)\r\n                    Toast.makeText(this@MapsActivity2, \"Something went wrong!\", Toast.LENGTH_LONG).show()\r\n\r\n                }\r\n            }) {\r\n                @SuppressLint(\"SuspiciousIndentation\")\r\n                @Throws(AuthFailureError::class)\r\n                override fun getHeaders(): Map<String, String> {\r\n                    val headers: MutableMap<String, String> = HashMap()\r\n                    headers.put(\"Content-Type\", \"application/json; charset=UTF-8\");\r\n                    headers.put(\"Authorization\", \"Bearer \" + pref.getToken());\r\n                    return headers\r\n                }\r\n            }\r\n\r\n        queue.add(jsonOblect)\r\n\r\n    }\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/com/pearlorganisation/figgo/CurrentMap/MapsActivity2.kt b/app/src/main/java/com/pearlorganisation/figgo/CurrentMap/MapsActivity2.kt
--- a/app/src/main/java/com/pearlorganisation/figgo/CurrentMap/MapsActivity2.kt	(revision 63075f00578e3fbd161ce64751e98cae3b1223d4)
+++ b/app/src/main/java/com/pearlorganisation/figgo/CurrentMap/MapsActivity2.kt	(date 1673600873271)
@@ -60,7 +60,7 @@
         driverimg = findViewById<ImageView>(R.id.driverimg)
 
 
-      /*  getmaps()*/
+        getmaps()
 
         accept.setOnClickListener {
             startActivity(Intent(this, EmergencyMapsActivity::class.java))
Index: app/src/main/java/com/pearlorganisation/figgo/CurrentMap/MapsActivity1.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.pearlorganisation.figgo.CurrentMap\r\n\r\nimport android.content.Intent\r\nimport androidx.appcompat.app.AppCompatActivity\r\nimport android.os.Bundle\r\nimport android.util.Log\r\nimport android.widget.*\r\nimport androidx.recyclerview.widget.LinearLayoutManager\r\nimport androidx.recyclerview.widget.RecyclerView\r\nimport com.android.volley.AuthFailureError\r\nimport com.android.volley.DefaultRetryPolicy\r\nimport com.android.volley.Response\r\nimport com.android.volley.VolleyError\r\nimport com.android.volley.toolbox.JsonObjectRequest\r\nimport com.android.volley.toolbox.Volley\r\nimport com.google.android.gms.maps.*\r\nimport com.google.android.gms.maps.model.LatLng\r\nimport com.google.android.gms.maps.model.Marker\r\nimport com.google.android.gms.maps.model.MarkerOptions\r\nimport com.pearlorganisation.PrefManager\r\nimport com.pearlorganisation.figgo.Adapter.CurrentOneWayKmCountAdapter\r\nimport com.pearlorganisation.figgo.Model.OneWayListRatingVehicle\r\nimport com.pearlorganisation.figgo.R\r\nimport com.pearlorganisation.figgo.UI.DashBoard\r\nimport com.pearlorganisation.figgo.databinding.ActivityMaps1Binding\r\nimport org.json.JSONObject\r\nimport java.util.HashMap\r\n\r\nclass MapsActivity1 : AppCompatActivity(), OnMapReadyCallback, GoogleMap.OnMarkerClickListener {\r\n\r\n    private lateinit var mMap: GoogleMap\r\n    private lateinit var binding: ActivityMaps1Binding\r\n    lateinit var currentOneWayKmCountAdapter: CurrentOneWayKmCountAdapter\r\n    lateinit var pref: PrefManager\r\n    lateinit var latLng: LatLng\r\n    val mList = ArrayList<OneWayListRatingVehicle>()\r\n    lateinit var fragment: SupportMapFragment\r\n    lateinit var cab_name : String\r\n    lateinit var driver_id : String\r\n    lateinit var pricestring : String\r\n    lateinit var cab_drivers : String\r\n    lateinit var ride : String\r\n    lateinit var year : String\r\n    lateinit var rating : String\r\n\r\n\r\n\r\n\r\n    override fun onCreate(savedInstanceState: Bundle?) {\r\n        super.onCreate(savedInstanceState)\r\n        binding = ActivityMaps1Binding.inflate(layoutInflater)\r\n        setContentView(binding.root)\r\n        var id = intent.getStringExtra(\"id\")\r\n        var ride_id = intent.getStringExtra(\"ride_id\")\r\n        pref  = PrefManager(this)\r\n        var ll_accept = findViewById<LinearLayout>(R.id.ll_accept)\r\n        val onewayvehiclelist = findViewById<RecyclerView>(R.id.onewayvehiclelist)\r\n        var shareimg = findViewById<ImageView>(R.id.shareimg)\r\n        var backimg = findViewById<ImageView>(R.id.backimg)\r\n        var progress = findViewById<ProgressBar>(R.id.progress)\r\n        var backtxt = findViewById<TextView>(R.id.backtxt)\r\n\r\n\r\n        getcablist(id,ride_id)\r\n\r\n\r\n\r\n\r\n\r\n        backtxt.setOnClickListener {\r\n            startActivity(Intent(this,DashBoard::class.java))\r\n        }\r\n\r\n        backimg.setOnClickListener {\r\n            startActivity(Intent(this,DashBoard::class.java))\r\n        }\r\n\r\n        shareimg.setOnClickListener {\r\n            var intent= Intent()\r\n            intent.action= Intent.ACTION_SEND\r\n            intent.putExtra(Intent.EXTRA_TEXT,\"I am Inviting you to join  Figgo App for better experience to book cabs\")\r\n            intent.setType(\"text/plain\")\r\n            startActivity(Intent.createChooser(intent, \"Invite Friends\"));\r\n        }\r\n\r\n      /*  mList.add(OneWayListRatingVehicle(\"Activa - 2012\",\"raingcountlist\",\"ride_service_rating\",\"Reject\",\"Accept\",\"min_price\",\"vehicle_detail\",\"year\",\"\"))\r\n        mList.add(OneWayListRatingVehicle(\"Activa - 2012\",\"raingcountlist\",\"ride_service_rating\",\"Reject\",\"Accept\",\"min_price\",\"vehicle_detail\",\"year\",\"\"))\r\n        mList.add(OneWayListRatingVehicle(\"Activa - 2012\",\"raingcountlist\",\"ride_service_rating\",\"Reject\",\"Accept\",\"min_price\",\"vehicle_detail\",\"year\",\"\"))\r\n        mList.add(OneWayListRatingVehicle(\"Activa - 2012\",\"raingcountlist\",\"ride_service_rating\",\"Reject\",\"Accept\",\"min_price\",\"vehicle_detail\",\"year\",\"\"))\r\n        mList.add(OneWayListRatingVehicle(\"Activa - 2012\",\"raingcountlist\",\"ride_service_rating\",\"Reject\",\"Accept\",\"min_price\",\"vehicle_detail\",\"year\",\"\"))\r\n        mList.add(OneWayListRatingVehicle(\"Activa - 2012\",\"raingcountlist\",\"ride_service_rating\",\"Reject\",\"Accept\",\"min_price\",\"vehicle_detail\",\"year\",\"\"))\r\n        mList.add(OneWayListRatingVehicle(\"Activa - 2012\",\"raingcountlist\",\"ride_service_rating\",\"Reject\",\"Accept\",\"min_price\",\"vehicle_detail\",\"year\",\"\"))\r\n        mList.add(OneWayListRatingVehicle(\"Activa - 2012\",\"raingcountlist\",\"ride_service_rating\",\"Reject\",\"Accept\",\"min_price\",\"vehicle_detail\",\"year\",\"\"))\r\n        mList.add(OneWayListRatingVehicle(\"Activa - 2012\",\"raingcountlist\",\"ride_service_rating\",\"Reject\",\"Accept\",\"min_price\",\"vehicle_detail\",\"year\",\"\"))\r\n        mList.add(OneWayListRatingVehicle(\"Activa - 2012\",\"raingcountlist\",\"ride_service_rating\",\"Reject\",\"Accept\",\"min_price\",\"vehicle_detail\",\"year\",\"\"))*/\r\n\r\n       /* currentOneWayKmCountAdapter= CurrentOneWayKmCountAdapter(this@MapsActivity1,mList)\r\n        binding.onewayvehiclelist.adapter=currentOneWayKmCountAdapter\r\n        binding.onewayvehiclelist.layoutManager=LinearLayoutManager(this@MapsActivity1)*/\r\n\r\n\r\n        val mapFragment = supportFragmentManager.findFragmentById(R.id.map) as SupportMapFragment\r\n        mapFragment.getMapAsync(this)\r\n    }\r\n\r\n    private fun getcablist(id: String?, ride_id: String?) {\r\n        val URL = \"https://test.pearl-developer.com/figo/api/ride/select-city-vehicle-type\"\r\n        Log.d(\"SendData\", \"URL===\" + URL)\r\n        val queue = Volley.newRequestQueue(this)\r\n        val json = JSONObject()\r\n        json.put(\"vehicle_type_id\", id)\r\n        json.put(\"ride_id\",ride_id)\r\n        Log.d(\"SendData\", \"json===\" + json)\r\n        val jsonOblect: JsonObjectRequest = object : JsonObjectRequest(Method.POST, URL, json, object :\r\n            Response.Listener<JSONObject?>               {\r\n            override fun onResponse(response: JSONObject?) {\r\n                Log.d(\"SendData\", \"response===\" + response)\r\n                if (response != null) {\r\n                    val status = response.getString(\"status\")\r\n                    if(status.equals(\"false\")){\r\n                        Toast.makeText(this@MapsActivity1, \"Something Went Wrong!\", Toast.LENGTH_LONG).show()\r\n                    }else{\r\n                        getnxtpage()\r\n                      //  Toast.makeText(this@MapsActivity1, \"true\", Toast.LENGTH_LONG).show()\r\n\r\n                    }\r\n                }\r\n\r\n            }\r\n        }, object : Response.ErrorListener {\r\n            override fun onErrorResponse(error: VolleyError?) {\r\n                Log.d(\"SendData\", \"error===\" + error)\r\n                Toast.makeText(this@MapsActivity1, \"Something Went Wrong!\", Toast.LENGTH_LONG).show()\r\n            }\r\n        }) {\r\n            @Throws(AuthFailureError::class)\r\n            override fun getHeaders(): Map<String, String> {\r\n                val headers: MutableMap<String, String> = HashMap()\r\n                headers.put(\"Content-Type\", \"application/json; charset=UTF-8\");\r\n                headers.put(\"Authorization\", \"Bearer \" + pref.getToken());\r\n                return headers\r\n            }\r\n        }\r\n        jsonOblect.setRetryPolicy(DefaultRetryPolicy(10000, DefaultRetryPolicy.DEFAULT_MAX_RETRIES, DefaultRetryPolicy.DEFAULT_BACKOFF_MULT))\r\n\r\n        queue.add(jsonOblect)\r\n\r\n\r\n    }\r\n\r\n\r\n    override fun onMapReady(googleMap: GoogleMap) {\r\n\r\n        mMap = googleMap\r\n        val myLocation = LatLng(30.302810, 78.012234)\r\n        mMap.addMarker(MarkerOptions().position(myLocation).title(\"Marker in India\"))\r\n        mMap.moveCamera(CameraUpdateFactory.newLatLng(myLocation))\r\n        mMap.uiSettings.isZoomControlsEnabled = true\r\n\r\n        mMap.setOnMapClickListener(object :GoogleMap.OnMapClickListener {\r\n            override fun onMapClick(latlng: LatLng) {\r\n                mMap.clear();\r\n                mMap.animateCamera(CameraUpdateFactory.newLatLng(latLng));\r\n                val location = LatLng(latlng.latitude, latlng.longitude)\r\n                mMap.addMarker(MarkerOptions().position(location))\r\n            }\r\n        })\r\n    }\r\n\r\n    override fun onMarkerClick(p0: Marker): Boolean {\r\n        TODO(\"Not yet implemented\")\r\n    }\r\n\r\n   private fun getnxtpage() {\r\n        val URL = \"https://test.pearl-developer.com/figo/api/ride/get-nearby-drivers\"\r\n       Log.d(\"SendData\", \"URL===\" + URL)\r\n        val queue = Volley.newRequestQueue(this)\r\n        val json = JSONObject()\r\n        json.put(\"ride_id\",pref.getride_id())\r\n        /*json.put(\"ride_id\",\"33\")*/\r\n      //  json.put(\"type\",\"current_booking\")\r\n       Log.d(\"SendData\", \"pref.getToken()===\" + pref.getToken())\r\n       Log.d(\"SendData\", \"json===\" + json)\r\n        val jsonOblect: JsonObjectRequest = object : JsonObjectRequest(Method.POST, URL, json, object :\r\n            Response.Listener<JSONObject?>               {\r\n            override fun onResponse(response: JSONObject?) {\r\n                Log.d(\"SendData\", \"response===\" + response)\r\n                if (response != null) {\r\n                    val status = response.getString(\"status\")\r\n                    if (response != null) {\r\n                        val cabs = response.getJSONObject(\"data\").getJSONArray(\"cabs\")\r\n                        val ride = response.getJSONObject(\"data\").getJSONObject(\"ride\").getString(\"id\")\r\n\r\n                        for(p2 in 0 until cabs.length()) {\r\n                            val data=response.getJSONObject(\"data\").getJSONArray(\"cabs\").getJSONObject(p2)\r\n                            cab_name=data.getString( \"cab\")\r\n                            pricestring=data.getString( \"price\")\r\n                              val cab_driversArray = data.getJSONArray(\"cab_drivers\")\r\n                           for (i in 0 until cab_driversArray.length()){\r\n\r\n                               val jsonObject = cab_driversArray.getJSONObject(i)\r\n                               driver_id =    jsonObject.getString(\"driver_id\")\r\n                             year =    jsonObject.getString(\"year\")\r\n                              rating=  jsonObject.getJSONObject(\"driver\").getString(\"rating_avg\")\r\n\r\n                           }\r\n                            mList.add(OneWayListRatingVehicle(driver_id,cab_name,year,pricestring, rating,ride,))\r\n\r\n                        }\r\n                        currentOneWayKmCountAdapter = CurrentOneWayKmCountAdapter(this@MapsActivity1,mList)\r\n                        binding.onewayvehiclelist.layoutManager=LinearLayoutManager(this@MapsActivity1)\r\n                        binding.onewayvehiclelist.adapter=currentOneWayKmCountAdapter\r\n                    }\r\n                }\r\n            }\r\n        }, object : Response.ErrorListener {\r\n            override fun onErrorResponse(error: VolleyError?) {\r\n                Log.d(\"SendData\", \"error===\" + error)\r\n                Toast.makeText(this@MapsActivity1, \"Something Went Wrong!\", Toast.LENGTH_LONG).show()\r\n            }\r\n        }) {\r\n            @Throws(AuthFailureError::class)\r\n            override fun getHeaders(): Map<String, String> {\r\n                val headers: MutableMap<String, String> = HashMap()\r\n                headers.put(\"Content-Type\", \"application/json; charset=UTF-8\");\r\n                headers.put(\"Authorization\", \"Bearer \" + pref.getToken());\r\n                return headers\r\n            }\r\n        }\r\n        jsonOblect.setRetryPolicy(DefaultRetryPolicy(10000, DefaultRetryPolicy.DEFAULT_MAX_RETRIES, DefaultRetryPolicy.DEFAULT_BACKOFF_MULT))\r\n\r\n        queue.add(jsonOblect)\r\n\r\n    }\r\n\r\n    override fun onBackPressed() {\r\n        super.onBackPressed()\r\n        startActivity(Intent(this, DashBoard::class.java))\r\n    }\r\n\r\n}\r\n\r\n\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/com/pearlorganisation/figgo/CurrentMap/MapsActivity1.kt b/app/src/main/java/com/pearlorganisation/figgo/CurrentMap/MapsActivity1.kt
--- a/app/src/main/java/com/pearlorganisation/figgo/CurrentMap/MapsActivity1.kt	(revision 63075f00578e3fbd161ce64751e98cae3b1223d4)
+++ b/app/src/main/java/com/pearlorganisation/figgo/CurrentMap/MapsActivity1.kt	(date 1673603025334)
@@ -187,30 +187,28 @@
                 Log.d("SendData", "response===" + response)
                 if (response != null) {
                     val status = response.getString("status")
-                    if (response != null) {
-                        val cabs = response.getJSONObject("data").getJSONArray("cabs")
-                        val ride = response.getJSONObject("data").getJSONObject("ride").getString("id")
+                    val cabs = response.getJSONObject("data").getJSONArray("cabs")
+                    val ride = response.getJSONObject("data").getJSONObject("ride").getString("id")
 
-                        for(p2 in 0 until cabs.length()) {
-                            val data=response.getJSONObject("data").getJSONArray("cabs").getJSONObject(p2)
-                            cab_name=data.getString( "cab")
-                            pricestring=data.getString( "price")
-                              val cab_driversArray = data.getJSONArray("cab_drivers")
-                           for (i in 0 until cab_driversArray.length()){
+                    for(p2 in 0 until cabs.length()) {
+                        val data=response.getJSONObject("data").getJSONArray("cabs").getJSONObject(p2)
+                        cab_name=data.getString( "cab")
+                        pricestring=data.getString( "price")
+                          val cab_driversArray = data.getJSONArray("cab_drivers")
+                       for (i in 0 until cab_driversArray.length()){
 
-                               val jsonObject = cab_driversArray.getJSONObject(i)
-                               driver_id =    jsonObject.getString("driver_id")
-                             year =    jsonObject.getString("year")
-                              rating=  jsonObject.getJSONObject("driver").getString("rating_avg")
-
-                           }
-                            mList.add(OneWayListRatingVehicle(driver_id,cab_name,year,pricestring, rating,ride,))
+                           val jsonObject = cab_driversArray.getJSONObject(i)
+                           driver_id =    jsonObject.getString("driver_id")
+                         year =    jsonObject.getString("year")
+                          rating=  jsonObject.getJSONObject("driver").getString("rating_avg")
+                           mList.add(OneWayListRatingVehicle(driver_id,cab_name,year,pricestring, rating,ride,))
 
-                        }
-                        currentOneWayKmCountAdapter = CurrentOneWayKmCountAdapter(this@MapsActivity1,mList)
-                        binding.onewayvehiclelist.layoutManager=LinearLayoutManager(this@MapsActivity1)
-                        binding.onewayvehiclelist.adapter=currentOneWayKmCountAdapter
-                    }
+                       }
+
+                    }
+                    currentOneWayKmCountAdapter = CurrentOneWayKmCountAdapter(this@MapsActivity1,mList)
+                    binding.onewayvehiclelist.layoutManager=LinearLayoutManager(this@MapsActivity1)
+                    binding.onewayvehiclelist.adapter=currentOneWayKmCountAdapter
                 }
             }
         }, object : Response.ErrorListener {
Index: app/src/main/java/com/pearlorganisation/figgo/BaseClass.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.pearlorganisation.figgo\r\n\r\nimport android.Manifest.permission.READ_EXTERNAL_STORAGE\r\nimport android.annotation.SuppressLint\r\nimport android.content.BroadcastReceiver\r\nimport android.content.Context\r\nimport android.content.Intent\r\nimport android.content.IntentFilter\r\nimport android.content.pm.PackageManager\r\nimport android.graphics.Bitmap\r\nimport android.net.ConnectivityManager\r\nimport android.net.Uri\r\nimport android.os.Build\r\nimport android.util.Base64\r\nimport android.util.Log\r\nimport android.view.View\r\nimport android.view.Window\r\nimport android.view.WindowManager\r\nimport android.view.inputmethod.InputMethodManager\r\nimport android.webkit.MimeTypeMap\r\nimport android.widget.EditText\r\nimport androidx.annotation.RequiresApi\r\nimport androidx.appcompat.app.AppCompatActivity\r\nimport androidx.core.app.ActivityCompat\r\nimport androidx.core.content.ContextCompat\r\nimport java.io.ByteArrayOutputStream\r\nimport java.util.jar.Manifest\r\nimport java.util.regex.Pattern\r\n\r\nabstract class BaseClass  : AppCompatActivity(){\r\n\r\n    protected var versionNew: String? = null\r\n    protected var versionName: String? = null\r\n    // var mIsUpdateAppTask: IsAppUpdated? = null\r\n    protected var baseApcContext: Context? = null\r\n    protected var activityIn: AppCompatActivity? = null\r\n    protected var LogTag: String? = null\r\n    protected var CAId: String? = null\r\n    protected var LogString: String? = null\r\n    var STORAGE_PERMISSION_CODE = 1\r\n    var session: Session? = null\r\n    var classname = \"Login\"\r\n    fun setBaseApcContextParent(\r\n        cnt: Context?,\r\n        ain: AppCompatActivity?,\r\n        lt: String?,\r\n        classname: String?\r\n    ) {\r\n        var classname = classname\r\n        baseApcContext = cnt\r\n        activityIn = ain\r\n        LogTag = lt\r\n        classname = classname\r\n        printLogs(lt, \"setBaseApcContextParent\", \"weAreIn\")\r\n    }\r\n\r\n    protected fun internetChangeBroadCast() {\r\n        printLogs(\"Logs\", \"initializeViews\", \"init\")\r\n        registerBroadcast()\r\n    }\r\n\r\n    @get:SuppressLint(\"ObsoleteSdkInt\")\r\n    val cTheme: Unit\r\n        get() {\r\n            if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.LOLLIPOP) {\r\n                val window: Window = getWindow()\r\n                window.addFlags(WindowManager.LayoutParams.FLAG_DRAWS_SYSTEM_BAR_BACKGROUNDS)\r\n                window.statusBarColor = getResources().getColor(R.color.colorRed)\r\n            }\r\n        }\r\n/*\r\n    @SuppressLint(\"ObsoleteSdkInt\")\r\n    fun getgreenTheme() {\r\n        if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.LOLLIPOP) {\r\n            val window: Window = getWindow()\r\n            window.addFlags(WindowManager.LayoutParams.FLAG_DRAWS_SYSTEM_BAR_BACKGROUNDS)\r\n            window.statusBarColor = getResources().getColor(R.color.green)\r\n        }\r\n    }*/\r\n\r\n    @SuppressLint(\"ObsoleteSdkInt\")\r\n    fun getwhiteTheme() {\r\n        if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.LOLLIPOP) {\r\n            val window: Window = getWindow()\r\n            window.addFlags(WindowManager.LayoutParams.FLAG_DRAWS_SYSTEM_BAR_BACKGROUNDS)\r\n            window.statusBarColor = getResources().getColor(R.color.white)\r\n        }\r\n    }\r\n\r\n    fun isNetworkConnected(context: Context): Boolean {\r\n        val cm: ConnectivityManager =\r\n            context.getSystemService(Context.CONNECTIVITY_SERVICE) as ConnectivityManager\r\n        return cm.getActiveNetworkInfo() != null\r\n    }\r\n\r\n    fun printLogs(tag: String?, funcs: String, msg: String) {\r\n        Log.i(\"OSG-\" + tag + \"__\" + funcs, msg)\r\n        LogString =\r\n            LogString + \"TAG - \" + tag + \"<br/> FUNCTION - \" + funcs + \"<br/> DATA - \" + msg + \"<br/><br/><br/><br/>\"\r\n    }\r\n\r\n    var IChangeReceiver: BroadcastReceiver = object : BroadcastReceiver() {\r\n        @RequiresApi(api = Build.VERSION_CODES.M)\r\n        override fun onReceive(pContext: Context, pIntent: Intent) {\r\n            val cm: ConnectivityManager =\r\n                pContext.getSystemService(Context.CONNECTIVITY_SERVICE) as ConnectivityManager\r\n            val no_connection: View? = findViewById<View>(R.id.no_connection)\r\n            // TextView try_again = findViewById(R.id.try_again);\r\n            if (cm.getActiveNetwork() != null) {\r\n                no_connection?.visibility = View.GONE\r\n                printLogs(LogTag, \"BroadcastReceiver\", \"func1$this\")\r\n            } else {\r\n                no_connection?.visibility = View.VISIBLE\r\n            }\r\n        }\r\n    }\r\n\r\n    fun registerBroadcast() {\r\n        try {\r\n            printLogs(LogTag, \"registerBroadcast\", \"init\")\r\n            val filter = IntentFilter(\"android.net.conn.CONNECTIVITY_CHANGE\")\r\n            registerReceiver(IChangeReceiver, filter)\r\n            isInternetReceiver = true\r\n            printLogs(LogTag, \"registerBroadcast\", \"exit\")\r\n        } catch (e: Exception) {\r\n            printLogs(LogTag, \"registerBroadcast\", \"Exception \" + e.message)\r\n        }\r\n    }\r\n\r\n    fun unregisterBroadcast() {\r\n        printLogs(LogTag, \"unregisterBroadcast\", \"init\")\r\n        try {\r\n            if (isInternetReceiver) {\r\n                printLogs(LogTag, \"unregisterBroadcast\", \"isInternetReceiver\")\r\n                isInternetReceiver = false\r\n                unregisterReceiver(IChangeReceiver)\r\n            }\r\n        } catch (e: Exception) {\r\n            printLogs(LogTag, \"unregisterBroadcast\", \"Exception \" + e.message)\r\n        }\r\n    }\r\n\r\n    /* protected fun showProgress(show: Boolean) {\r\n         val ll_main: View = findViewById<View>(R.id.ll_main)\r\n         val loader: View = findViewById<View>(R.id.loader)\r\n         if (show) {\r\n             ll_main.visibility = View.GONE\r\n             loader.visibility = View.VISIBLE\r\n         } else {\r\n             ll_main.visibility = View.VISIBLE\r\n             loader.visibility = View.GONE\r\n         }\r\n     }*/\r\n\r\n    /*fun syncUpdates(baseApcContext: Context?, activityIn: AppCompatActivity?) {\r\n        var versionCode = 1\r\n        try {\r\n            val packageInfo: PackageInfo = getPackageManager().getPackageInfo(getPackageName(), 0)\r\n            versionName = packageInfo.versionName\r\n            versionCode = packageInfo.versionCode\r\n        } catch (e: PackageManager.NameNotFoundException) {\r\n            e.printStackTrace()\r\n        }\r\n        versionNew = versionCode.toString()\r\n        //        versionNew = versionName;\r\n        printLogs(\r\n            LogTag,\r\n            \"syncUpdates\",\r\n            \"versionName $versionName VersionCode $versionCode NewVersion $versionNew\"\r\n        )\r\n        mIsUpdateAppTask = IsAppUpdated(versionNew, baseApcContext)\r\n        mIsUpdateAppTask.execute(null as Void?)\r\n    }*/\r\n\r\n    fun verifyVersion() {\r\n        /* syncUpdates(baseApcContext, activityIn);\r\n        printLogs(LogTag, \"verifyVersion\", \"init\");\r\n        session = new Session(baseApcContext);\r\n        Boolean isUpdate = session.getIsUpdateRequired();\r\n        printLogs(LogTag, \"verifyVersion\", \"isUpdate \" + isUpdate);\r\n        if (isUpdate) {\r\n            Intent intent = new Intent(baseApcContext, AppUpdateA.class);\r\n            startActivity(intent);\r\n            finish();\r\n        }*/\r\n    }\r\n\r\n    fun openFileExplorer() {\r\n        val intent = Intent()\r\n        intent.setType(\"image/*\")\r\n        intent.setAction(Intent.ACTION_GET_CONTENT)\r\n        startActivityForResult(\r\n            Intent.createChooser(\r\n                intent,\r\n                \"Select Picture\"\r\n            ), STORAGE_PERMISSION_CODE\r\n        )\r\n    }\r\n\r\n    protected fun setCustomError(msg: String?, mEditView: EditText) {\r\n        mEditView.setError(msg, null)\r\n        mEditView.setBackgroundResource(R.drawable.input_error_profile)\r\n        mEditView.requestFocus()\r\n    }\r\n\r\n    protected fun setCustomErrorDisabled(mEditView: EditText) {\r\n        mEditView.setError(null)\r\n        mEditView.setBackgroundResource(R.drawable.input_boder_profile)\r\n    }\r\n\r\n    fun validateName(inputUser: EditText): Boolean {\r\n        val name = inputUser.text.toString()\r\n        System.out.println(\"NAMEE===\"+name)\r\n        setCustomError(null, inputUser)\r\n        return if (name.isEmpty()) {\r\n            val sMessage = \"Please enter name..!!\"\r\n            setCustomError(sMessage, inputUser)\r\n            false\r\n        } else if (!isValidName(name)) {\r\n            val sMessage = \"Name must be at least 3 character and at most 50 character..!!\"\r\n            setCustomError(sMessage, inputUser)\r\n            false\r\n        } else {\r\n            setCustomErrorDisabled(inputUser)\r\n            true\r\n        }\r\n\r\n    }\r\n\r\n    fun validateAddress1(inputUser: EditText): Boolean {\r\n        val address: String = inputUser.getText().toString().trim { it <= ' ' }\r\n        setCustomError(null, inputUser)\r\n        return if (address.isEmpty()) {\r\n            val sMessage = \"Please enter Address..!!\"\r\n            setCustomError(sMessage, inputUser)\r\n            false\r\n        } else if (!isValidAddress10(address)) {\r\n            val sMessage =\r\n                \"Address must be at least 10 character and should have House no / Flat no / Road no.\"\r\n            setCustomError(sMessage, inputUser)\r\n            false\r\n        } else {\r\n            setCustomErrorDisabled(inputUser)\r\n            true\r\n        }\r\n    }\r\n\r\n    fun validateAddress(inputUser: EditText): Boolean {\r\n        val address: String = inputUser.getText().toString().trim { it <= ' ' }\r\n        setCustomError(null, inputUser)\r\n        return if (address.isEmpty()) {\r\n            val sMessage = \"Please enter Address..!!\"\r\n            setCustomError(sMessage, inputUser)\r\n            false\r\n        } else if (!isValidAddress(address)) {\r\n            val sMessage = \"Address must be at least 3 character\"\r\n            setCustomError(sMessage, inputUser)\r\n            false\r\n        } else {\r\n            setCustomErrorDisabled(inputUser)\r\n            true\r\n        }\r\n    }\r\n\r\n    fun validateEmail(email: EditText): Boolean {\r\n        val email_id: String = email.getText().toString().trim { it <= ' ' }\r\n        setCustomError(null, email)\r\n        return if (email_id.isEmpty()) {\r\n            val sMessage = \"Please enter email..!!\"\r\n            setCustomError(sMessage, email)\r\n            false\r\n        } else {\r\n            setCustomErrorDisabled(email)\r\n            true\r\n        }\r\n    }\r\n\r\n    fun validateDob(dob: EditText): Boolean {\r\n        val dob_id: String = dob.getText().toString().trim { it <= ' ' }\r\n        setCustomError(null, dob)\r\n        return if (dob_id.isEmpty()) {\r\n            val sMessage = \"Please enter valid dob..!!\"\r\n            setCustomError(sMessage, dob)\r\n            false\r\n        } else {\r\n            setCustomErrorDisabled(dob)\r\n            true\r\n        }\r\n    }\r\n    fun validateState(state: EditText): Boolean {\r\n        val dob_id: String = state.getText().toString().trim { it <= ' ' }\r\n        setCustomError(null, state)\r\n        return if (dob_id.isEmpty()) {\r\n            val sMessage = \"state is must required ..!!\"\r\n            setCustomError(sMessage, state)\r\n            false\r\n        } else {\r\n            setCustomErrorDisabled(state)\r\n            true\r\n        }\r\n    }\r\n    fun validateCity(city: EditText): Boolean {\r\n        val dob_id: String = city.getText().toString().trim { it <= ' ' }\r\n        setCustomError(null, city)\r\n        return if (dob_id.isEmpty()) {\r\n            val sMessage = \"city is must required ..!!\"\r\n            setCustomError(sMessage, city)\r\n            false\r\n        } else {\r\n            setCustomErrorDisabled(city)\r\n            true\r\n        }\r\n    }\r\n    fun validateWorkState(workState: EditText): Boolean {\r\n        val dob_id: String = workState.getText().toString().trim { it <= ' ' }\r\n        setCustomError(null, workState)\r\n        return if (dob_id.isEmpty()) {\r\n            val sMessage = \"first work state is must required ..!!\"\r\n            setCustomError(sMessage, workState)\r\n            false\r\n        } else {\r\n            setCustomErrorDisabled(workState)\r\n            true\r\n        }\r\n    }\r\n\r\n    fun validateNumber(number: EditText): Boolean {\r\n        val num: String = number.getText().toString().trim { it <= ' ' }\r\n        setCustomError(null, number)\r\n        return if (num.isEmpty()) {\r\n            val sMessage = \"Please enter number..!!\"\r\n            setCustomError(sMessage, number)\r\n            false\r\n        } else if (!isphoneNumberValid(num)) {\r\n            val sMessage = \"Number must be 10 character and not be alphabet..!!\"\r\n            setCustomError(sMessage, number)\r\n            false\r\n        } else {\r\n            setCustomErrorDisabled(number)\r\n            true\r\n        }\r\n    }\r\n    fun validatedriverDLNo(driverDLNo: EditText): Boolean {\r\n        val num: String = driverDLNo.getText().toString().trim { it <= ' ' }\r\n        setCustomError(null, driverDLNo)\r\n        return if (num.isEmpty()) {\r\n            val sMessage = \"Please enter driver license no..!!\"\r\n            setCustomError(sMessage, driverDLNo)\r\n            false\r\n        } else if (!isValidNumber(num)) {\r\n            val sMessage = \"Number must be 15 letter or digits..!!\"\r\n            setCustomError(sMessage, driverDLNo)\r\n            false\r\n        } else {\r\n            setCustomErrorDisabled(driverDLNo)\r\n            true\r\n        }\r\n    }\r\n    fun validatedriverRegistrationNo(registrationNo: EditText): Boolean {\r\n        val num: String = registrationNo.getText().toString().trim { it <= ' ' }\r\n        setCustomError(null,registrationNo)\r\n        return if (num.isEmpty()) {\r\n            val sMessage = \"Please enter driver registeration no..!!\"\r\n            setCustomError(sMessage, registrationNo)\r\n            false\r\n        } else if (!isValidNumber(num)) {\r\n            val sMessage = \"Number must be 15 letter or digits..!!\"\r\n            setCustomError(sMessage, registrationNo)\r\n            false\r\n        } else {\r\n            setCustomErrorDisabled(registrationNo)\r\n            true\r\n        }\r\n    }\r\n    fun validateDriverInsuranceDate(insurance: EditText): Boolean {\r\n        val dob_id: String = insurance.getText().toString().trim { it <= ' ' }\r\n        setCustomError(null, insurance)\r\n        return if (dob_id.isEmpty()) {\r\n            val sMessage = \"please enter valid date ..!!\"\r\n            setCustomError(sMessage, insurance)\r\n            false\r\n        } else {\r\n            setCustomErrorDisabled(insurance)\r\n            true\r\n        }\r\n    }\r\n\r\n    fun getExtension(uri: Uri?): String? {\r\n\r\n        val mimeType: String? = uri?.let { baseApcContext?.getContentResolver()!!.getType(it).toString() }\r\n        return MimeTypeMap.getSingleton().getExtensionFromMimeType(mimeType)\r\n    }\r\n\r\n    fun requestPermission() {\r\n        if (ContextCompat.checkSelfPermission(this,android.Manifest.permission.READ_EXTERNAL_STORAGE) == PackageManager.PERMISSION_GRANTED\r\n        ) {\r\n            openFileExplorer()\r\n            return\r\n        }\r\n        ActivityCompat.shouldShowRequestPermissionRationale(this, android.Manifest.permission.READ_EXTERNAL_STORAGE)\r\n\r\n        ActivityCompat.requestPermissions(this, arrayOf(android.Manifest.permission.READ_EXTERNAL_STORAGE),\r\n            STORAGE_PERMISSION_CODE\r\n        )\r\n    }\r\n\r\n    fun BitMapToString(bitmap: Bitmap): String {\r\n        val baos = ByteArrayOutputStream()\r\n        bitmap.compress(Bitmap.CompressFormat.JPEG, 60, baos)\r\n        val b = baos.toByteArray()\r\n        Base64.encodeToString(b, Base64.DEFAULT)\r\n        return Base64.encodeToString(b, Base64.DEFAULT)\r\n    }\r\n\r\n    @SuppressLint(\"ServiceCast\")\r\n    fun hideKeybaord(v: View) {\r\n        val inputMethodManager =\r\n            getSystemService(Context.INPUT_METHOD_SERVICE) as InputMethodManager\r\n        inputMethodManager.hideSoftInputFromWindow(v.applicationWindowToken, 0)\r\n    }\r\n\r\n    protected override fun onPause() {\r\n        super.onPause()\r\n    }\r\n\r\n    protected override fun onResume() {\r\n        super.onResume()\r\n    }\r\n\r\n    override fun onDestroy() {\r\n        super.onDestroy()\r\n    }\r\n\r\n    protected abstract fun setLayoutXml()\r\n    protected abstract fun initializeViews()\r\n    protected abstract fun initializeClickListners()\r\n    protected abstract fun initializeInputs()\r\n    protected abstract fun initializeLabels()\r\n\r\n    companion object {\r\n        var isInternetReceiver = false\r\n        fun isValidNumber(number: String): Boolean {\r\n            var result: Boolean\r\n            result = true\r\n            if (number.length < 12) {\r\n                result = false\r\n            }\r\n            if (number.length > 12) {\r\n                result = false\r\n            }\r\n\r\n            return result\r\n        }\r\n        fun isValidMobile(phone: String): Boolean {\r\n            return if (!Pattern.matches(\"[a-zA-Z]+\", phone)) {\r\n                phone.length > 6 && phone.length <= 13\r\n            }\r\n            else false\r\n        }\r\n        fun isphoneNumberValid(num:String):Boolean{\r\n            var result:Boolean\r\n            result=true\r\n            if (!Pattern.matches(\"[a-zA-Z]+\", num)){\r\n                result=false\r\n            }\r\n            if (num.length > 6){\r\n                result=false\r\n            }\r\n            if (num.length <= 13){\r\n                result=false\r\n            }\r\n            return result\r\n        }\r\n\r\n        fun isValidName(name: String): Boolean {\r\n            var result: Boolean\r\n            result = true\r\n            if (name.length < 3) {\r\n                result = false\r\n            }\r\n            if (name.length > 50) {\r\n                result = false\r\n            }\r\n            return result\r\n        }\r\n\r\n        fun isValidAddress10(name: String): Boolean {\r\n            var result: Boolean\r\n            result = true\r\n            if (name.length < 10) {\r\n                result = false\r\n            }\r\n            return result\r\n        }\r\n\r\n        fun isValidAddress(name: String): Boolean {\r\n            var result: Boolean\r\n            result = true\r\n            if (name.length < 3) {\r\n                result = false\r\n            }\r\n            return result\r\n        }\r\n    }\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/com/pearlorganisation/figgo/BaseClass.kt b/app/src/main/java/com/pearlorganisation/figgo/BaseClass.kt
--- a/app/src/main/java/com/pearlorganisation/figgo/BaseClass.kt	(revision 63075f00578e3fbd161ce64751e98cae3b1223d4)
+++ b/app/src/main/java/com/pearlorganisation/figgo/BaseClass.kt	(date 1673611894176)
@@ -140,6 +140,9 @@
         }
     }
 
+
+
+
     /* protected fun showProgress(show: Boolean) {
          val ll_main: View = findViewById<View>(R.id.ll_main)
          val loader: View = findViewById<View>(R.id.loader)
