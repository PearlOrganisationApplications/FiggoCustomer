Index: app/src/main/java/com/pearlorganisation/figgo/UI/DashBoard.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.pearlorganisation.figgo.UI\r\n//Neeraj\r\n\r\nimport android.content.Intent\r\nimport android.content.IntentSender\r\nimport android.content.pm.PackageManager\r\nimport android.graphics.Color\r\nimport android.location.Location\r\nimport android.location.LocationManager\r\nimport android.os.Build\r\nimport android.os.Bundle\r\nimport android.os.Handler\r\nimport android.os.Looper\r\nimport android.view.Gravity\r\nimport android.view.View\r\nimport android.widget.Button\r\nimport android.widget.ImageView\r\nimport android.widget.Toast\r\nimport androidx.appcompat.app.ActionBarDrawerToggle\r\nimport androidx.appcompat.app.AppCompatActivity\r\nimport androidx.core.app.ActivityCompat\r\nimport androidx.core.content.ContextCompat\r\nimport androidx.core.view.GravityCompat\r\nimport androidx.drawerlayout.widget.DrawerLayout\r\nimport androidx.fragment.app.Fragment\r\nimport com.google.android.gms.common.api.GoogleApiClient\r\nimport com.google.android.gms.common.api.ResolvableApiException\r\nimport com.google.android.gms.location.LocationRequest\r\nimport com.google.android.gms.location.LocationServices\r\nimport com.google.android.gms.location.LocationSettingsRequest\r\nimport com.google.android.gms.maps.GoogleMap\r\nimport com.google.android.gms.maps.model.LatLng\r\nimport com.google.android.material.bottomnavigation.BottomNavigationView\r\nimport com.google.android.material.navigation.NavigationView\r\nimport com.pearlorganisation.CurrentBottomNavigationFragment.CurrentMoreFragment\r\nimport com.pearlorganisation.CurrentBottomNavigationFragment.CurrentRidesFragment\r\nimport com.pearlorganisation.DrawerItemActivity.CancellationPolicy\r\nimport com.pearlorganisation.DrawerItemActivity.CurrentAboutActivity\r\nimport com.pearlorganisation.DrawerItemActivity.TermAndConditionActivity\r\nimport com.pearlorganisation.PrefManager\r\nimport com.pearlorganisation.figgo.Adapter.CabCategoryAdapter\r\nimport com.pearlorganisation.figgo.Adapter.FiggoAddAdapter\r\nimport com.pearlorganisation.figgo.BaseClass\r\nimport com.pearlorganisation.figgo.Model.CabCategory\r\nimport com.pearlorganisation.figgo.Model.FiggoAdd\r\nimport com.pearlorganisation.figgo.R\r\nimport com.pearlorganisation.figgo.UI.Fragments.HomeDashboard\r\nimport com.pearlorganisation.figgo.UI.Fragments.OutStation.RoundAndTourFragment\r\nimport com.pearlorganisation.figgo.UI.Fragments.RidesBottom\r\nimport com.pearlorganisation.figgo.UI.Fragments.SupportBottomNav\r\nimport com.pearlorganisation.figgo.databinding.ActivityDashBoardBinding\r\nimport java.util.*\r\n\r\n\r\nclass DashBoard : BaseClass() {\r\n    lateinit var binding: ActivityDashBoardBinding\r\n    lateinit var toggle: ActionBarDrawerToggle\r\n    lateinit var drawerLayout: DrawerLayout\r\n    private var hasGps = false\r\n    private var hasNetwork = false\r\n    lateinit var cabCategoryAdapter: CabCategoryAdapter\r\n    var cab_category_list=ArrayList<CabCategory>()\r\n    lateinit var figgoAddAdapter: FiggoAddAdapter\r\n    var figgo_add_list=ArrayList<FiggoAdd>()\r\n    var doubleBackToExitPressedOnce = false\r\n    var count = 0\r\n    private lateinit var locationRequest: LocationRequest;\r\n    private val REQUEST_CHECK_SETTINGS: Int=101;\r\n    var transaction_id :String ?= \"\"\r\n    var backPressedTime: Long = 0\r\n    private val permissionId = 2\r\n    private val requestcodes = 2\r\n    var PERMISSIONS_REQUEST_ACCESS_FINE_LOCATION=101;\r\n    var homeFrag = HomeDashboard()\r\n    lateinit var locationManager: LocationManager\r\n    private var mMap: GoogleMap? = null\r\n    private var mGoogleApiClient: GoogleApiClient? = null\r\n    var mLastLocation: Location? = null\r\n    var mLocationRequest: com.google.android.gms.location.LocationRequest? = null\r\n    private val mLogout: Button? = null\r\n    private val mRequest: Button? = null\r\n    private val pickupLocation: LatLng? = null\r\n    lateinit var navView : NavigationView\r\n    lateinit var prefManager: PrefManager\r\n    override fun setLayoutXml() {\r\n        TODO(\"Not yet implemented\")\r\n    }\r\n\r\n\r\n    override fun initializeViews() {\r\n        TODO(\"Not yet implemented\")\r\n    }\r\n\r\n    override fun initializeClickListners() {\r\n        TODO(\"Not yet implemented\")\r\n    }\r\n\r\n    override fun initializeInputs() {\r\n        TODO(\"Not yet implemented\")\r\n    }\r\n\r\n    override fun initializeLabels() {\r\n        TODO(\"Not yet implemented\")\r\n    }\r\n\r\n    override fun onCreate(savedInstanceState: Bundle?) {\r\n        super.onCreate(savedInstanceState)\r\n      setContentView(R.layout.a_dashboard)\r\n        binding = ActivityDashBoardBinding.inflate(layoutInflater)\r\n        prefManager = PrefManager(this)\r\n        prefManager.setToken(\"949|vBiS1sR6b5AICFuOTyP7zrkHoNhqzEsz7wu4AsKA\")\r\n\r\n        var window=window\r\n        window.setStatusBarColor(Color.parseColor(\"#000F3B\"))\r\n        val drawerLayout = findViewById<View>(R.id.drawerLayout) as DrawerLayout\r\n        var menu_naviagtion = findViewById<ImageView>(R.id.menu_naviagtion)\r\n        var rides =/* RidesBottom()*/ CurrentRidesFragment()\r\n        var more = /*RoundAndTourFragment()*/ CurrentMoreFragment()\r\n        var support = SupportBottomNav()\r\n        var navView = findViewById<NavigationView>(R.id.navView)\r\n        var shareimg = findViewById<ImageView>(R.id.shareimg)\r\n        toggle = ActionBarDrawerToggle(this@DashBoard, drawerLayout, R.string.Change_MPIN, R.string.Rides)\r\n        drawerLayout.addDrawerListener(toggle)\r\n        supportActionBar?.setDisplayHomeAsUpEnabled(true)\r\n        toggle.syncState()\r\n        shareimg()\r\n        backimg()\r\n        backtxt()\r\n\r\n\r\n        menu_naviagtion.setOnClickListener {\r\n            drawerLayout.openDrawer(Gravity.LEFT)\r\n        }\r\n\r\n\r\n        grantLocPer()\r\n\r\n       var bottom = findViewById<BottomNavigationView>(R.id.navigation_bar)\r\n        bottom.setOnItemSelectedListener {\r\n            when(it.itemId){\r\n                R.id.home_b->{\r\n                    setfragment(homeFrag)\r\n                    true\r\n\r\n                }\r\n                R.id.rides_b->{\r\n                    setfragment(rides)\r\n                    true\r\n\r\n                }\r\n\r\n\r\n                R.id.more_b->{\r\n                    setfragment(more)\r\n                    true\r\n\r\n        }\r\n                R.id.support_b->{\r\n            setfragment(support)\r\n            true\r\n\r\n\r\n        }\r\n\r\n                else -> {\r\n                    setfragment(homeFrag)\r\n                        true\r\n\r\n                }                }\r\n            }\r\n\r\n\r\n//        binding.apply {\r\n//\r\n//        }\r\n        /**---------------------------Cab_Category-----------------------*/\r\n\r\n//        binding.figgoAddList.layoutManager=LinearLayoutManager(this,LinearLayoutManager.HORIZONTAL,false)\r\n//        figgo_add_list.add(FiggoAdd(R.drawable.figgoadd))\r\n//        figgo_add_list.add(FiggoAdd(R.drawable.figgoadd))\r\n//        figgo_add_list.add(FiggoAdd(R.drawable.figgoadd))\r\n//        figgoAddAdapter=FiggoAddAdapter(figgo_add_list)\r\n//        recycler.layoutManager = GridLayoutManager(this,3)\r\n//        recycler.adapter=figgoAddAdapter\r\n//        binding.figgoAddList.adapter=figgoAddAdapter\r\n//\r\n//\r\n//\r\n//        binding.cabCategoryList.layoutManager=GridLayoutManager(this,4)\r\n//        cab_category_list.add(CabCategory(R.drawable.citycab,\"City-Cab\"))\r\n//        cab_category_list.add(CabCategory(R.drawable.outstationcab,\"Outstation\"))\r\n//        cab_category_list.add(CabCategory(R.drawable.fadesharecab,\"Share-Cab\"))\r\n//        cab_category_list.add(CabCategory(R.drawable.airportcab,\"Airpot-Cab\"))\r\n//        cab_category_list.add(CabCategory(R.drawable.royalcab,\"Royal-cab\"))\r\n//        cab_category_list.add(CabCategory(R.drawable.fadetour,\"Tour-plan\"))\r\n//        cab_category_list.add(CabCategory(R.drawable.goodsparcel,\"Goods vechile\"))\r\n//        cab_category_list.add(CabCategory(R.drawable.fadehote,\"Hotel\"))\r\n//        cab_category_list.add(CabCategory(R.drawable.fadeflight,\"Flight\"))\r\n//        cab_category_list.add(CabCategory(R.drawable.fadetrain,\"Train\"))\r\n//        cab_category_list.add(CabCategory(R.drawable.fadebus,\"Micro Bus\"))\r\n//        cab_category_list.add(CabCategory(R.drawable.fademore,\"More\"))\r\n//        cabCategoryAdapter= CabCategoryAdapter(this,cab_category_list)\r\n//        recyclerView.layoutManager= GridLayoutManager(this,4)\r\n//        recyclerView.adapter=cabCategoryAdapter\r\n//        binding.cabCategoryList.adapter=cabCategoryAdapter\r\n\r\n        /**------------------------Figgo Add---------------------------------*/\r\n\r\n\r\n        /**--------------------------------------------------------------------------*/\r\n\r\n\r\n        supportActionBar?.setDisplayHomeAsUpEnabled(true)\r\n\r\n        navView.setNavigationItemSelectedListener {\r\n            when (it.itemId) {\r\n                R.id.change_mpin -> {\r\n                    Toast.makeText(this@DashBoard, \"change_mpin Clicked\", Toast.LENGTH_SHORT).show()\r\n                }\r\n                R.id.rides -> {\r\n                    Toast.makeText(this@DashBoard, \"rides Clicked\", Toast.LENGTH_SHORT).show()\r\n                }\r\n                R.id.Logout -> {\r\n                    prefManager.setToken(\"\")\r\n                    prefManager.setMpin(\"\")\r\n                    startActivity(Intent(this,LoginActivity::class.java))\r\n                }\r\n\r\n                R.id.term_condition -> {\r\n                    startActivity(Intent(this,TermAndConditionActivity::class.java))\r\n                }\r\n                R.id.cancellation_policy -> {\r\n                    startActivity(Intent(this,CancellationPolicy::class.java))\r\n                }\r\n                R.id.About_Figgo -> {\r\n                    startActivity(Intent(this,CurrentAboutActivity::class.java))\r\n                }\r\n\r\n            }\r\n            true\r\n        }\r\n\r\n    }\r\n\r\n    private fun setfragment(frag: Fragment) {\r\n        supportFragmentManager.beginTransaction().apply {\r\n            replace(R.id.framedash, frag)\r\n            commit()\r\n        }}\r\n\r\n\r\n\r\n    override fun onBackPressed() {\r\n        val count = supportFragmentManager.backStackEntryCount\r\n        if (count == 0) {\r\n            if (doubleBackToExitPressedOnce) {\r\n                // System.exit(0);\r\n                val a = Intent(Intent.ACTION_MAIN)\r\n                a.addCategory(Intent.CATEGORY_HOME)\r\n                a.flags = Intent.FLAG_ACTIVITY_NEW_TASK\r\n                startActivity(a)\r\n                finish()\r\n                return\r\n            }\r\n            this.doubleBackToExitPressedOnce = true\r\n            Toast.makeText(this, \"Press again to exit\", Toast.LENGTH_SHORT).show()\r\n\r\n            Handler(Looper.getMainLooper()).postDelayed(Runnable {\r\n                doubleBackToExitPressedOnce = false\r\n            }, 2000)\r\n        } else {\r\n            supportFragmentManager.popBackStack()\r\n        }\r\n    }\r\n  /*  private fun isLocationEnabled(): Boolean {\r\n        val locationManager: LocationManager = this@DashBoard.getSystemService(Context.LOCATION_SERVICE) as LocationManager\r\n        return locationManager.isProviderEnabled(LocationManager.GPS_PROVIDER) || locationManager.isProviderEnabled(\r\n            LocationManager.NETWORK_PROVIDER\r\n        )\r\n    }\r\n    private fun checkPermissions(): Boolean {\r\n        if (ActivityCompat.checkSelfPermission(\r\n                this@DashBoard,\r\n                android.Manifest.permission.ACCESS_COARSE_LOCATION\r\n            ) == PackageManager.PERMISSION_GRANTED &&\r\n            ActivityCompat.checkSelfPermission(\r\n                this@DashBoard,\r\n                android.Manifest.permission.ACCESS_FINE_LOCATION\r\n            ) == PackageManager.PERMISSION_GRANTED\r\n        ) {\r\n            return true\r\n        }\r\n        return false\r\n    }\r\n    private fun requestPermissions() {\r\n        ActivityCompat.requestPermissions(\r\n            this@DashBoard,\r\n            arrayOf(\r\n                android.Manifest.permission.ACCESS_COARSE_LOCATION,\r\n                android.Manifest.permission.ACCESS_FINE_LOCATION\r\n            ),\r\n            permissionId\r\n        )\r\n    }\r\n\r\n    override fun onRequestPermissionsResult(requestCode: Int, permissions: Array<String>, grantResults: IntArray) {\r\n        super.onRequestPermissionsResult(requestCode, permissions, grantResults)\r\n        if (requestCode == permissionId) {\r\n            if ((grantResults.isNotEmpty() && grantResults[0] == PackageManager.PERMISSION_GRANTED)) {\r\n                setfragment(homeFrag)\r\n            }\r\n        }\r\n    }*/\r\n\r\n   /* override fun onResume() {\r\n        super.onResume()\r\n        if (checkPermissions()) {\r\n            if (isLocationEnabled()) {\r\n                setfragment(homeFrag)\r\n            } else {\r\n                Toast.makeText(this@DashBoard, \"Please turn on location\", Toast.LENGTH_LONG)\r\n                    .show()\r\n                val intent = Intent(android.provider.Settings.ACTION_LOCATION_SOURCE_SETTINGS)\r\n                startActivity(intent)\r\n            }\r\n        }else {\r\n            requestPermissions()\r\n        }\r\n    }*/\r\n /*  private fun displayLocationSettingsRequest(context: Context) {\r\n       val googleApiClient = GoogleApiClient.Builder(context)\r\n           .addApi(LocationServices.API).build()\r\n       googleApiClient.connect()\r\n       val locationRequest = com.google.android.gms.location.LocationRequest.create()\r\n       locationRequest.priority = com.google.android.gms.location.LocationRequest.PRIORITY_HIGH_ACCURACY\r\n       locationRequest.interval = 10000\r\n       locationRequest.fastestInterval = (10000 / 2).toLong()\r\n       val builder = LocationSettingsRequest.Builder().addLocationRequest(locationRequest)\r\n       builder.setAlwaysShow(true)\r\n       val result =\r\n           LocationServices.SettingsApi.checkLocationSettings(googleApiClient, builder.build())\r\n       result.setResultCallback { result ->\r\n           val status = result.status\r\n           when (status.statusCode) {\r\n               LocationSettingsStatusCodes.SUCCESS -> {}\r\n               LocationSettingsStatusCodes.RESOLUTION_REQUIRED -> {}\r\n               LocationSettingsStatusCodes.SETTINGS_CHANGE_UNAVAILABLE -> {}\r\n           }\r\n       }\r\n\r\n\r\n\r\n\r\n   }*/\r\n\r\n\r\n\r\n\r\n   private fun requestPermissions() {\r\n       ActivityCompat.requestPermissions(this@DashBoard,\r\n           arrayOf(android.Manifest.permission.ACCESS_COARSE_LOCATION, android.Manifest.permission.ACCESS_FINE_LOCATION), permissionId)\r\n   }\r\n    private fun isLocationPermissionGranted(): Boolean {\r\n        return if (ActivityCompat.checkSelfPermission(this@DashBoard, android.Manifest.permission.ACCESS_COARSE_LOCATION)\r\n            != PackageManager.PERMISSION_GRANTED && ActivityCompat.checkSelfPermission(this@DashBoard, android.Manifest.permission.ACCESS_FINE_LOCATION) != PackageManager.PERMISSION_GRANTED) {\r\n            ActivityCompat.requestPermissions(this@DashBoard, arrayOf(android.Manifest.permission.ACCESS_FINE_LOCATION, android.Manifest.permission.ACCESS_COARSE_LOCATION),\r\n                requestcodes\r\n            )\r\n            false\r\n        } else {\r\n            true\r\n        }\r\n    }\r\n\r\n    fun grantLocPer() {\r\n\r\n        if (isLocationPermissionGranted()) {\r\n\r\n\r\n            if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.M) {\r\n                if (ContextCompat.checkSelfPermission(\r\n                        this@DashBoard,\r\n                        android.Manifest.permission.ACCESS_FINE_LOCATION\r\n                    )\r\n                    == PackageManager.PERMISSION_GRANTED\r\n                ) {\r\n                    checkLocationService()\r\n                } else {\r\n                    ActivityCompat.requestPermissions(\r\n                        this@DashBoard,\r\n                        arrayOf(android.Manifest.permission.ACCESS_FINE_LOCATION),\r\n                        PERMISSIONS_REQUEST_ACCESS_FINE_LOCATION\r\n                    );\r\n                }\r\n            } else {\r\n                checkLocationService()\r\n            }\r\n\r\n        } else {\r\n            requestPermissions()\r\n        }\r\n    }\r\n    fun checkLocationService() {\r\n\r\n        locationRequest = LocationRequest.create();\r\n        locationRequest.setPriority(com.google.android.gms.location.LocationRequest.PRIORITY_HIGH_ACCURACY);\r\n        locationRequest.setInterval(10 * 1000);\r\n        locationRequest.setFastestInterval(2 * 1000);\r\n\r\n\r\n        val builder = LocationSettingsRequest.Builder().addLocationRequest(locationRequest);\r\n        // builder.setAlwaysShow(true);\r\n        val client = LocationServices.getSettingsClient(this@DashBoard)\r\n        val task = client.checkLocationSettings(builder.build())\r\n        task.addOnSuccessListener(this@DashBoard){it->\r\n            it.locationSettingsStates;\r\n           setfragment(homeFrag)\r\n        }\r\n\r\n        task.addOnFailureListener(this@DashBoard) { e ->\r\n            if (e is ResolvableApiException) {\r\n                // Location settings are not satisfied, but this can be fixed\r\n                // by showing the user a dialog.\r\n                try {\r\n                    // Show the dialog by calling startResolutionForResult(),\r\n                    // and check the result in onActivityResult().\r\n                    e.startResolutionForResult (this@DashBoard, REQUEST_CHECK_SETTINGS)\r\n\r\n                } catch (sendEx: IntentSender.SendIntentException) {\r\n                    // Ignore the error.\r\n                }\r\n\r\n            }\r\n        }\r\n    }\r\n    override fun onActivityResult(requestCode: Int, resultCode: Int, data: Intent?) {\r\n        super.onActivityResult(requestCode, resultCode, data)\r\n        if (resultCode == -1) {\r\n           setfragment(homeFrag)\r\n        } else {\r\n            grantLocPer()\r\n        }\r\n    }\r\n\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/com/pearlorganisation/figgo/UI/DashBoard.kt b/app/src/main/java/com/pearlorganisation/figgo/UI/DashBoard.kt
--- a/app/src/main/java/com/pearlorganisation/figgo/UI/DashBoard.kt	(revision fab82203368abdd7a031ee01b2b3cd09d54de347)
+++ b/app/src/main/java/com/pearlorganisation/figgo/UI/DashBoard.kt	(date 1673933999845)
@@ -235,7 +235,9 @@
                 R.id.About_Figgo -> {
                     startActivity(Intent(this,CurrentAboutActivity::class.java))
                 }
-
+                R.id.Logout -> {
+                    startActivity(Intent(this,CurrentAboutActivity::class.java))
+                }
             }
             true
         }
Index: app/src/main/java/com/pearlorganisation/PrefManager.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.pearlorganisation\r\n\r\nimport android.content.Context\r\nimport android.content.SharedPreferences\r\n\r\n\r\n\r\n\r\n class PrefManager(var context: Context) {\r\n     // Shared preferences file name\r\n     private val PREF_NAME = \"welcome\"\r\n     private val IS_FIRST_TIME_LAUNCH = \"IsFirstTimeLaunch\"\r\n     // shared pref mode\r\n     var PRIVATE_MODE = 0\r\n    var pref: SharedPreferences? = context.getSharedPreferences(PREF_NAME, PRIVATE_MODE)\r\n    var editor: SharedPreferences.Editor? = pref!!.edit()\r\n    var _context: Context? = context\r\n     private val IS_VALID_LOGIN = \"no\"\r\n\r\n\r\n\r\n\r\n /*   fun PrefManager(context: Context?) {\r\n        pref = _context\r\n        editor =\r\n    }*/\r\n\r\n    fun setFirstTimeLaunch(isFirstTime: Boolean) {\r\n        editor!!.putBoolean(IS_FIRST_TIME_LAUNCH, isFirstTime)\r\n        editor!!.commit()\r\n    }\r\n\r\n    fun isFirstTimeLaunch(): Boolean {\r\n        return pref!!.getBoolean(IS_FIRST_TIME_LAUNCH, true)\r\n    }\r\n     fun setCount(mpin: String){\r\n         editor!!.putString(\"count\",mpin)\r\n         editor?.commit()\r\n     }\r\n\r\n\r\n     fun getCount():String{\r\n         return pref?.getString(\"count\",\"\").toString()\r\n     }\r\n     fun setMpin(mpin: String){\r\n         editor!!.putString(\"mpin\",mpin)\r\n         editor?.commit()\r\n     }\r\n\r\n\r\n     fun getMpin():String{\r\n         return pref?.getString(\"mpin\",\"\").toString()\r\n     }\r\n\r\n     fun setToken(token:String){\r\n         editor?.putString(\"token\",token)\r\n         editor?.commit()\r\n     }\r\n\r\n     fun getToken():String{\r\n         return pref?.getString(\"token\",\"null\").toString()\r\n     }\r\n\r\n     fun setRideId(ride_id:String){\r\n         editor?.putString(\"ride_id\",ride_id)\r\n         editor?.commit()\r\n     }\r\n\r\n     fun getRideId():String{\r\n         return pref?.getString(\"ride_id\",\"null\").toString()\r\n     }\r\n\r\n     fun setOtp(otp:String){\r\n         editor?.putString(\"otp\",otp)\r\n         editor?.commit()\r\n     }\r\n\r\n     fun getOtp():String{\r\n         return pref?.getString(\"otp\",\"null\").toString()\r\n     }\r\n     fun setAccountDetails(email:String,name:String,photoURL:String){\r\n         editor?.putString(\"EmailID\",email)\r\n         editor?.putString(\"EmailName\",name)\r\n         editor?.putString(\"PhotoUrl\",photoURL)\r\n         editor?.commit()\r\n     }\r\n     fun getAccountMail():String{\r\n         return pref?.getString(\"EmailID\",\"\")!!\r\n     }\r\n     fun getAccountName():String{\r\n         return pref?.getString(\"EmailName\",\"\")!!\r\n     }\r\n     fun getAccountPhotoURL():String{\r\n         return pref?.getString(\"PhotoUrl\",\"\")!!\r\n     }\r\n     fun setBookingNo(book_no:String){\r\n         editor?.putString(\"book_no\",book_no)\r\n         editor?.commit()\r\n     }\r\n\r\n     fun getBookingNo():String{\r\n         return pref?.getString(\"book_no\",\"null\").toString()\r\n     }\r\n\r\n     fun setVehicleId(vehicle_id:String){\r\n         editor?.putString(\"vehicle_id\",vehicle_id)\r\n         editor?.commit()\r\n     }\r\n\r\n     fun getVehicleId():String{\r\n         return pref?.getString(\"vehicle_id\",\"null\").toString()\r\n     }\r\n\r\n     fun setUserId(userid:String){\r\n         editor?.putString(\"userid\",userid)\r\n         editor?.commit()\r\n     }\r\n     fun getUserId():String{\r\n         return pref?.getString(\"userid\",\"\").toString()\r\n     }\r\n     fun isValidLogin(): Boolean {\r\n         return pref!!.getBoolean(IS_VALID_LOGIN, false)\r\n     }\r\n     fun setNumber(number:String){\r\n         editor?.putString(\"number\",number)\r\n         editor?.commit()\r\n     }\r\n     fun getNumber():String{\r\n         return pref?.getString(\"number\",\"\").toString()\r\n     }\r\n\r\n\r\n     fun setride_id(ride_id:String){\r\n         editor?.putString(\"ride_id\",ride_id)\r\n         editor?.commit()\r\n     }\r\n\r\n     fun getride_id():String{\r\n         return pref?.getString(\"ride_id\",\"null\").toString()\r\n     }\r\n\r\n     fun setdriver_id(driver_id:String){\r\n         editor?.putString(\"driver_id\",driver_id)\r\n         editor?.commit()\r\n     }\r\n     fun setactivavehiclenumber(activavehiclenumber:String){\r\n         editor?.putString(\"activavehiclenumber\",activavehiclenumber)\r\n         editor?.commit()\r\n     }\r\n     fun setdrivername(drivername:String){\r\n         editor?.putString(\"drivername\",drivername)\r\n         editor?.commit()\r\n     }\r\n\r\n     fun getdrivername():String{\r\n         return pref?.getString(\"drivername\",\"null\").toString()\r\n     }\r\n\r\n     fun setdl_number(dl_number:String){\r\n         editor?.putString(\"dl_number\",dl_number)\r\n         editor?.commit()\r\n     }\r\n\r\n     fun getdl_number():String{\r\n         return pref?.getString(\"dl_number\",\"null\").toString()\r\n     }\r\n     fun getactivavehiclenumber():String{\r\n         return pref?.getString(\"activavehiclenumber\",\"null\").toString()\r\n     }\r\n     fun getdriver_id(): String {\r\n         return pref?.getString(\"driver_id\",\"driver_id\").toString()\r\n\r\n     }\r\n     fun setprice(price:String){\r\n         editor?.putString(\"price\",price)\r\n         editor?.commit()\r\n     }\r\n\r\n     fun getprice():String{\r\n         return pref?.getString(\"price\",\"null\").toString()\r\n     }\r\n\r\n     fun setToLatL(lat:String){\r\n         editor?.putString(\"lat_to_l\",lat)\r\n         editor?.commit()\r\n     }\r\n\r\n     fun getToLatL():String{\r\n         return pref?.getString(\"lat_to_l\",\"null\").toString()\r\n     }\r\n     fun setToLngL(lat:String){\r\n         editor?.putString(\"lng_to_l\",lat)\r\n         editor?.commit()\r\n     }\r\n\r\n     fun getToLngL():String{\r\n         return pref?.getString(\"lng_to_l\",\"null\").toString()\r\n     }\r\n     fun setToLngM(lat:String){\r\n         editor?.putString(\"lng_to_m\",lat)\r\n         editor?.commit()\r\n     }\r\n\r\n     fun getToLngM():String{\r\n         return pref?.getString(\"lng_to_m\",\"null\").toString()\r\n     }\r\n     fun setToLatM(lat:String){\r\n         editor?.putString(\"lat_to_m\",lat)\r\n         editor?.commit()\r\n     }\r\n\r\n     fun getToLatM():String{\r\n         return pref?.getString(\"lat_to_m\",\"null\").toString()\r\n     }\r\n\r\n\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/com/pearlorganisation/PrefManager.kt b/app/src/main/java/com/pearlorganisation/PrefManager.kt
--- a/app/src/main/java/com/pearlorganisation/PrefManager.kt	(revision fab82203368abdd7a031ee01b2b3cd09d54de347)
+++ b/app/src/main/java/com/pearlorganisation/PrefManager.kt	(date 1673935007430)
@@ -69,7 +69,14 @@
      fun getRideId():String{
          return pref?.getString("ride_id","null").toString()
      }
+     fun setprice(price:String){
+         editor?.putString("price",price)
+         editor?.commit()
+     }
 
+     fun getprice():String{
+         return pref?.getString("price","null").toString()
+     }
      fun setOtp(otp:String){
          editor?.putString("otp",otp)
          editor?.commit()
@@ -110,43 +117,27 @@
      fun getVehicleId():String{
          return pref?.getString("vehicle_id","null").toString()
      }
-
-     fun setUserId(userid:String){
-         editor?.putString("userid",userid)
-         editor?.commit()
-     }
-     fun getUserId():String{
-         return pref?.getString("userid","").toString()
-     }
-     fun isValidLogin(): Boolean {
-         return pref!!.getBoolean(IS_VALID_LOGIN, false)
-     }
-     fun setNumber(number:String){
-         editor?.putString("number",number)
-         editor?.commit()
-     }
-     fun getNumber():String{
-         return pref?.getString("number","").toString()
-     }
-
-
-     fun setride_id(ride_id:String){
-         editor?.putString("ride_id",ride_id)
-         editor?.commit()
-     }
-
-     fun getride_id():String{
-         return pref?.getString("ride_id","null").toString()
-     }
-
      fun setdriver_id(driver_id:String){
          editor?.putString("driver_id",driver_id)
          editor?.commit()
      }
+
+     fun getdriver_id(): String {
+         return pref?.getString("driver_id","driver_id").toString()
+
+     }
+
      fun setactivavehiclenumber(activavehiclenumber:String){
-         editor?.putString("activavehiclenumber",activavehiclenumber)
+         editor?.putString("activavehiclenumber",activavehiclen umber)
          editor?.commit()
      }
+
+     fun getactivavehiclenumber():String{
+         return pref?.getString("activavehiclenumber","null").toString()
+     }
+
+
+
      fun setdrivername(drivername:String){
          editor?.putString("drivername",drivername)
          editor?.commit()
@@ -164,21 +155,37 @@
      fun getdl_number():String{
          return pref?.getString("dl_number","null").toString()
      }
-     fun getactivavehiclenumber():String{
-         return pref?.getString("activavehiclenumber","null").toString()
-     }
-     fun getdriver_id(): String {
-         return pref?.getString("driver_id","driver_id").toString()
+
 
+     fun setUserId(userid:String){
+         editor?.putString("userid",userid)
+         editor?.commit()
+     }
+     fun getUserId():String{
+         return pref?.getString("userid","").toString()
+     }
+     fun isValidLogin(): Boolean {
+         return pref!!.getBoolean(IS_VALID_LOGIN, false)
+     }
+     fun setNumber(number:String){
+         editor?.putString("number",number)
+         editor?.commit()
+     }
+     fun getNumber():String{
+         return pref?.getString("number","").toString()
      }
-     fun setprice(price:String){
-         editor?.putString("price",price)
+
+
+     fun setride_id(ride_id:String){
+         editor?.putString("ride_id",ride_id)
          editor?.commit()
      }
 
-     fun getprice():String{
-         return pref?.getString("price","null").toString()
+     fun getride_id():String{
+         return pref?.getString("ride_id","null").toString()
      }
+
+
 
      fun setToLatL(lat:String){
          editor?.putString("lat_to_l",lat)
Index: app/src/main/java/com/pearlorganisation/figgo/UI/Fragments/PayFragment.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.pearlorganisation.figgo.UI.Fragments\r\n\r\nimport android.annotation.SuppressLint\r\nimport android.app.ProgressDialog\r\nimport android.content.Intent\r\nimport android.os.Bundle\r\nimport android.text.TextUtils\r\nimport android.util.Log\r\nimport android.view.LayoutInflater\r\nimport android.view.View\r\nimport android.view.ViewGroup\r\nimport android.webkit.WebView\r\nimport android.widget.*\r\nimport androidx.appcompat.app.AppCompatActivity\r\nimport androidx.fragment.app.Fragment\r\nimport androidx.navigation.Navigation\r\nimport androidx.test.core.app.ApplicationProvider.getApplicationContext\r\nimport com.android.volley.AuthFailureError\r\nimport com.android.volley.Response\r\nimport com.android.volley.VolleyError\r\nimport com.android.volley.toolbox.JsonObjectRequest\r\nimport com.android.volley.toolbox.Volley\r\nimport com.google.android.libraries.places.api.Places\r\nimport com.google.android.libraries.places.api.model.Place\r\nimport com.google.android.libraries.places.widget.Autocomplete\r\nimport com.google.android.libraries.places.widget.AutocompleteActivity\r\nimport com.google.android.libraries.places.widget.model.AutocompleteActivityMode\r\nimport com.payu.base.models.ErrorResponse\r\nimport com.payu.base.models.PayUPaymentParams\r\nimport com.payu.checkoutpro.PayUCheckoutPro\r\nimport com.payu.checkoutpro.utils.PayUCheckoutProConstants\r\nimport com.payu.checkoutpro.utils.PayUCheckoutProConstants.CP_HASH_NAME\r\nimport com.payu.checkoutpro.utils.PayUCheckoutProConstants.CP_HASH_STRING\r\nimport com.payu.ui.model.listeners.PayUCheckoutProListener\r\nimport com.payu.ui.model.listeners.PayUHashGenerationListener\r\n\r\nimport com.pearlorganisation.PrefManager\r\nimport com.pearlorganisation.figgo.R\r\nimport com.pearlorganisation.figgo.UI.CabDetailsActivity\r\nimport com.razorpay.Checkout\r\nimport com.razorpay.PaymentData\r\nimport com.razorpay.PaymentResultListener\r\nimport org.json.JSONException\r\nimport org.json.JSONObject\r\nimport java.text.SimpleDateFormat\r\nimport java.util.*\r\n\r\n\r\nclass PayFragment : Fragment()  {\r\n    var psg_name: EditText? = null\r\n    var psg_contact: EditText? = null\r\n    var pick_address: EditText? = null\r\n    var landmark: EditText? = null\r\n    var pick_location: TextView? = null\r\n    var msg: EditText? = null\r\n    var AUTOCOMPLETE_REQUEST_CODE = -1\r\n    var lat :String ?= \"\"\r\n    var lng :String ?= \"\"\r\n    lateinit var pref: PrefManager\r\n    var transaction_id :String ?= \"\"\r\n\r\n    override fun onCreateView(\r\n        inflater: LayoutInflater, container: ViewGroup?,\r\n        savedInstanceState: Bundle?\r\n    ): View? {\r\n        // Inflate the layout for this fragment\r\n        return inflater.inflate(R.layout.fragment_pay, container, false)\r\n    }\r\n\r\n    override fun onViewCreated(view: View, savedInstanceState: Bundle?) {\r\n        super.onViewCreated(view, savedInstanceState)\r\n        var pay_now = view.findViewById<Button>(R.id.pay_now)\r\n\r\n        psg_name = view.findViewById<EditText>(R.id.psg_name)\r\n        psg_contact = view.findViewById<EditText>(R.id.psg_contact_no)\r\n        pick_address = view.findViewById<EditText>(R.id.pick_address)\r\n        landmark = view.findViewById<EditText>(R.id.landmark)\r\n        pick_location = view.findViewById<TextView>(R.id.pick_location)\r\n        msg = view.findViewById<EditText>(R.id.msg)\r\n        pref = PrefManager(requireActivity())\r\n\r\n        var backtxt =view.findViewById<TextView>(R.id.backtxt)\r\n        var backimg =view.findViewById<ImageView>(R.id.backimg)\r\n        var shareimg = view.findViewById<ImageView>(R.id.shareimg)\r\n\r\n        backimg.setOnClickListener {\r\n            Navigation.findNavController(view).navigate(R.id.action_payFragment_to_cabBookFragment)\r\n        }\r\n\r\n        backtxt.setOnClickListener {\r\n            Navigation.findNavController(view).navigate(R.id.action_payFragment_to_cabBookFragment)\r\n        }\r\n\r\n        shareimg.setOnClickListener {\r\n            var intent= Intent()\r\n            intent.action= Intent.ACTION_SEND\r\n            intent.putExtra(Intent.EXTRA_TEXT,\"I am Inviting you to join  Figgo App for better experience to book cabs\")\r\n            intent.setType(\"text/plain\")\r\n            startActivity(Intent.createChooser(intent, \"Invite Friends\"))\r\n        }\r\n\r\n\r\n        val apiKey = getString(R.string.api_key)\r\n        if (!Places.isInitialized()) {\r\n            Places.initialize(requireActivity(), apiKey)\r\n        }\r\n\r\n        pick_location?.setOnClickListener {\r\n\r\n\r\n            val field = Arrays.asList(Place.Field.ID, Place.Field.ADDRESS, Place.Field.LAT_LNG)\r\n            val intent = Autocomplete.IntentBuilder(AutocompleteActivityMode.FULLSCREEN, field)\r\n                .build(requireActivity())\r\n            startActivityForResult(intent, AUTOCOMPLETE_REQUEST_CODE)\r\n        }\r\n\r\n\r\n\r\n        pay_now.setOnClickListener {\r\n\r\n            if (psg_name?.text.toString().equals(\"\")){\r\n                Toast.makeText(requireActivity(), \"Please type Passenger Name\", Toast.LENGTH_LONG).show()\r\n\r\n            }else if (psg_contact?.text.toString().equals(\"\")){\r\n                Toast.makeText(requireActivity(), \"Please type Passenger Name\", Toast.LENGTH_LONG).show()\r\n\r\n            }else {\r\n\r\n               // getPayUNow()\r\n                getPayNow();\r\n            }\r\n\r\n        }\r\n\r\n    }\r\n\r\n    private fun getPayNow() {\r\n        val progressDialog = ProgressDialog(requireActivity())\r\n        progressDialog.show()\r\n        val URL =\"https://test.pearl-developer.com/figo/api/ride/enter-passenger-details\"\r\n        val queue = Volley.newRequestQueue(requireContext())\r\n        val json = JSONObject()\r\n        json.put(\"name\", psg_name?.text.toString())\r\n        json.put(\"contact\", psg_contact?.text.toString())\r\n        json.put(\"lat\", \"\")\r\n        json.put(\"lng\", \"\")\r\n        json.put(\"pickup_address\", \"\")\r\n        json.put(\"landmark\", \"\")\r\n        json.put(\"ride_id\", pref.getride_id())\r\n        if (msg?.text.toString().equals(\"\")){\r\n            msg?.text = null\r\n        }\r\n        json.put(\"additional_message \", msg?.text.toString())\r\n\r\n        val jsonOblect: JsonObjectRequest = object : JsonObjectRequest(Method.POST, URL, json, object :\r\n                Response.Listener<JSONObject?>               {\r\n                @SuppressLint(\"SuspiciousIndentation\")\r\n                override fun onResponse(response: JSONObject?) {\r\n\r\n                    Log.d(\"SendData\", \"response===\" + response)\r\n                    if (response != null) {\r\n\r\n                        progressDialog.hide()\r\n                        val amt = \"1\"\r\n                        val amount = Math.round(amt.toFloat() * 100).toInt()\r\n                        val checkout = Checkout()\r\n                        checkout.setKeyID(\"rzp_test_capDM1KlnUhj5f\")\r\n                        checkout.setImage(R.drawable.appicon)\r\n                        val obj = JSONObject()\r\n                        try {\r\n                            obj.put(\"name\", \"Figgo\")\r\n                            obj.put(\"description\", \"Payment\")\r\n                            obj.put(\"theme.color\", \"\")\r\n                            obj.put(\"send_sms_hash\", true)\r\n                            obj.put(\"allow_rotation\", true)\r\n                            obj.put(\"currency\", \"INR\")\r\n                            obj.put(\"amount\", amount)\r\n                            val preFill = JSONObject()\r\n                            preFill.put(\"email\", \"a@gmail.com\")\r\n                            preFill.put(\"contact\", \"91\" + \"1234567098\")\r\n                            obj.put(\"prefill\", preFill)\r\n                            checkout.open(requireActivity(), obj)\r\n                        } catch (e: JSONException) {\r\n                            Toast.makeText(getApplicationContext(), \"Error in payment: \" + e.message, Toast.LENGTH_SHORT).show();\r\n                            e.printStackTrace()\r\n                        }\r\n                          view?.let { Navigation.findNavController(it).navigate(R.id.action_payFragment_to_paymentWayFragment) }\r\n\r\n\r\n\r\n                    }\r\n                    // Get your json response and convert it to whatever you want.\r\n                }\r\n            }, object : Response.ErrorListener {\r\n                override fun onErrorResponse(error: VolleyError?) {\r\n                    Log.d(\"SendData\", \"error===\" + error)\r\n                    Toast.makeText(requireActivity(), \"Something went wrong!\", Toast.LENGTH_LONG).show()\r\n\r\n                }\r\n            }) {\r\n                @SuppressLint(\"SuspiciousIndentation\")\r\n                @Throws(AuthFailureError::class)\r\n                override fun getHeaders(): Map<String, String> {\r\n                    val headers: MutableMap<String, String> = HashMap()\r\n                    headers.put(\"Content-Type\", \"application/json; charset=UTF-8\");\r\n                    headers.put(\"Authorization\", \"Bearer \" + pref.getToken())\r\n                    headers.put(\"Accept\", \"application/vnd.api+json\");\r\n                    return headers\r\n                }\r\n            }\r\n\r\n        queue.add(jsonOblect)\r\n\r\n    }\r\n\r\n\r\n\r\n   private fun getPayUNow() {\r\n\r\n        val URL =\"https://test.pearl-developer.com/figo/api/ride/enter-passenger-details\"\r\n        val queue = Volley.newRequestQueue(requireContext())\r\n        val json = JSONObject()\r\n        json.put(\"name\", psg_name?.text.toString())\r\n        json.put(\"contact\", psg_contact?.text.toString())\r\n        json.put(\"lat\", \"\")\r\n        json.put(\"lng\", \"\")\r\n        json.put(\"pickup_address\",\"\")\r\n        json.put(\"landmark\", \"\")\r\n        json.put(\"ride_id\", pref.getRideId())\r\n        if (msg?.text.toString().equals(\"\")){\r\n            msg?.text = null\r\n        }\r\n        json.put(\"additional_message \", msg?.text.toString())\r\n\r\n\r\n\r\n\r\n        val jsonOblect: JsonObjectRequest =\r\n            object : JsonObjectRequest(Method.POST, URL, json, object :\r\n                Response.Listener<JSONObject?>               {\r\n                @SuppressLint(\"SuspiciousIndentation\")\r\n                override fun onResponse(response: JSONObject?) {\r\n\r\n                    Log.d(\"SendData\", \"response===\" + response)\r\n                    if (response != null) {\r\n\r\n                        val payUPaymentParams = PayUPaymentParams.Builder()\r\n                            .setAmount(\"1.0\")\r\n                        .setIsProduction(true)\r\n                        .setKey(\"0MQaQP\")\r\n                        .setProductInfo(\"Test\")\r\n                        .setPhone(\"9999999999\")\r\n                        .setTransactionId(System.currentTimeMillis().toString())\r\n                        .setFirstName(\"John\")\r\n                        .setEmail(\"John@gmail.com\")\r\n                       // .setSurl(\"https://payu.response.firebaseapp.com/success\")\r\n                      //  .setFurl(\"https://payu.response.firebaseapp.com/failure\")\r\n                        //Optional, can contain any additional PG params\r\n                        .build()\r\n                        PayUCheckoutPro.open(\r\n                            requireActivity(), payUPaymentParams,\r\n                            object : PayUCheckoutProListener {\r\n\r\n\r\n                                override fun onPaymentSuccess(response: Any) {\r\n                                    response as HashMap<*, *>\r\n                                    val payUResponse = response[PayUCheckoutProConstants.CP_PAYU_RESPONSE]\r\n                                    val merchantResponse = response[PayUCheckoutProConstants.CP_MERCHANT_RESPONSE]\r\n                                }\r\n\r\n\r\n                                override fun onPaymentFailure(response: Any) {\r\n                                    response as HashMap<*, *>\r\n                                    val payUResponse = response[PayUCheckoutProConstants.CP_PAYU_RESPONSE]\r\n                                    val merchantResponse = response[PayUCheckoutProConstants.CP_MERCHANT_RESPONSE]\r\n                                }\r\n\r\n\r\n                                override fun onPaymentCancel(isTxnInitiated:Boolean) {\r\n                                }\r\n\r\n\r\n                                override fun onError(errorResponse: ErrorResponse) {\r\n                                    val errorMessage: String\r\n                                    if (errorResponse != null && errorResponse.errorMessage != null && errorResponse.errorMessage!!.isNotEmpty())\r\n                                        errorMessage = errorResponse.errorMessage!!\r\n                                    else {\r\n                                        //   errorMessage = resources.getString(R.string.some_error_occurred)\r\n                                    }\r\n                                }\r\n\r\n                                override fun setWebViewProperties(webView: WebView?, bank: Any?) {\r\n                                    //For setting webview properties, if any. Check Customized Integration section for more details on this\r\n                                }\r\n\r\n                                override fun generateHash(\r\n                                    valueMap: HashMap<String, String?>,\r\n                                    hashGenerationListener: PayUHashGenerationListener\r\n                                ) {\r\n                                    if ( valueMap.containsKey(CP_HASH_STRING)\r\n                                        && valueMap.containsKey(CP_HASH_STRING) != null\r\n                                        && valueMap.containsKey(CP_HASH_NAME)\r\n                                        && valueMap.containsKey(CP_HASH_NAME) != null) {\r\n\r\n                                        val hashData = valueMap[CP_HASH_STRING]\r\n                                        val hashName = valueMap[CP_HASH_NAME]\r\n\r\n                                        //Do not generate hash from local, it needs to be calculated from server side only. Here, hashString contains hash created from your server side.\r\n                                       /* val hash: String? = hashString\r\n                                        if (!TextUtils.isEmpty(hash)) {\r\n                                            val dataMap: HashMap<String, String?> = HashMap()\r\n                                            dataMap[hashName!!] = hash!!\r\n                                            hashGenerationListener.onHashGenerated(dataMap)\r\n                                        }*/\r\n                                    }\r\n                                }\r\n                            })\r\n\r\n                    }\r\n                    // Get your json response and convert it to whatever you want.\r\n                }\r\n            }, object : Response.ErrorListener {\r\n                override fun onErrorResponse(error: VolleyError?) {\r\n                    Log.d(\"SendData\", \"error===\" + error)\r\n                    Toast.makeText(requireActivity(), \"Something went wrong!\", Toast.LENGTH_LONG).show()\r\n\r\n                }\r\n            }) {\r\n                @SuppressLint(\"SuspiciousIndentation\")\r\n                @Throws(AuthFailureError::class)\r\n                override fun getHeaders(): Map<String, String> {\r\n                    val headers: MutableMap<String, String> = HashMap()\r\n                    headers.put(\"Content-Type\", \"application/json; charset=UTF-8\");\r\n                    headers.put(\"Authorization\", \"Bearer \" + pref.getToken());\r\n                    headers.put(\"Accept\", \"application/vnd.api+json\");\r\n                    return headers\r\n                }\r\n            }\r\n\r\n        queue.add(jsonOblect)\r\n\r\n    }\r\n\r\n\r\n    override fun onActivityResult(requestCode: Int, resultCode: Int, data: Intent?) {\r\n        super.onActivityResult(requestCode, resultCode, data)\r\n        if (requestCode == AUTOCOMPLETE_REQUEST_CODE) {\r\n            if (resultCode == AppCompatActivity.RESULT_OK) {\r\n                val place = Autocomplete.getPlaceFromIntent(data!!)\r\n\r\n                pick_location!!.setText(place.address)\r\n                    lat = place.latLng.latitude.toString()\r\n                   lng = place.latLng.longitude.toString()\r\n\r\n            } else if (resultCode == AutocompleteActivity.RESULT_ERROR) {\r\n                val status = Autocomplete.getStatusFromIntent(data!!)\r\n            } else if (resultCode == AppCompatActivity.RESULT_CANCELED) {\r\n            }\r\n        }\r\n    }\r\n\r\n\r\n\r\n}\r\n\r\n\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/com/pearlorganisation/figgo/UI/Fragments/PayFragment.kt b/app/src/main/java/com/pearlorganisation/figgo/UI/Fragments/PayFragment.kt
--- a/app/src/main/java/com/pearlorganisation/figgo/UI/Fragments/PayFragment.kt	(revision fab82203368abdd7a031ee01b2b3cd09d54de347)
+++ b/app/src/main/java/com/pearlorganisation/figgo/UI/Fragments/PayFragment.kt	(date 1673933910557)
@@ -146,7 +146,7 @@
         json.put("lng", "")
         json.put("pickup_address", "")
         json.put("landmark", "")
-        json.put("ride_id", pref.getride_id())
+        json.put("ride_id", pref.getRideId())
         if (msg?.text.toString().equals("")){
             msg?.text = null
         }
Index: app/src/main/java/com/pearlorganisation/figgo/UI/Fragments/Current_cityCab.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.pearlorganisation.figgo.UI.Fragments\r\n\r\nimport android.annotation.SuppressLint\r\nimport android.app.Activity\r\nimport android.app.DatePickerDialog\r\nimport android.app.TimePickerDialog\r\nimport android.content.Context\r\nimport android.content.Context.LOCATION_SERVICE\r\nimport android.content.Intent\r\nimport android.content.IntentSender\r\nimport android.content.pm.PackageManager\r\nimport android.location.*\r\nimport android.net.ConnectivityManager\r\nimport android.net.NetworkCapabilities\r\nimport android.os.Build\r\nimport android.os.Bundle\r\nimport android.util.Log\r\nimport android.view.LayoutInflater\r\nimport android.view.View\r\nimport android.view.ViewGroup\r\nimport android.widget.*\r\nimport androidx.appcompat.app.AppCompatActivity\r\nimport androidx.cardview.widget.CardView\r\nimport androidx.core.app.ActivityCompat\r\nimport androidx.core.content.ContextCompat\r\nimport androidx.core.view.isVisible\r\nimport androidx.databinding.DataBindingUtil\r\nimport androidx.fragment.app.Fragment\r\nimport androidx.recyclerview.widget.GridLayoutManager\r\nimport androidx.recyclerview.widget.RecyclerView\r\nimport com.android.volley.AuthFailureError\r\nimport com.android.volley.DefaultRetryPolicy\r\nimport com.android.volley.Response\r\nimport com.android.volley.VolleyError\r\nimport com.android.volley.toolbox.JsonObjectRequest\r\nimport com.android.volley.toolbox.Volley\r\nimport com.google.android.gms.common.api.ResolvableApiException\r\nimport com.google.android.gms.location.FusedLocationProviderClient\r\nimport com.google.android.gms.location.LocationRequest\r\nimport com.google.android.gms.location.LocationRequest.PRIORITY_HIGH_ACCURACY\r\nimport com.google.android.gms.location.LocationServices\r\nimport com.google.android.gms.location.LocationSettingsRequest\r\nimport com.google.android.gms.location.Priority.PRIORITY_HIGH_ACCURACY\r\nimport com.google.android.gms.maps.CameraUpdateFactory\r\nimport com.google.android.gms.maps.GoogleMap\r\nimport com.google.android.gms.maps.OnMapReadyCallback\r\nimport com.google.android.gms.maps.SupportMapFragment\r\nimport com.google.android.gms.maps.model.LatLng\r\nimport com.google.android.gms.maps.model.MarkerOptions\r\nimport com.google.android.libraries.places.api.Places\r\nimport com.google.android.libraries.places.api.model.Place\r\nimport com.google.android.libraries.places.widget.Autocomplete\r\nimport com.google.android.libraries.places.widget.AutocompleteActivity\r\nimport com.google.android.libraries.places.widget.model.AutocompleteActivityMode\r\nimport com.pearlorganisation.PrefManager\r\nimport com.pearlorganisation.figgo.Adapter.AdvanceCityDataAdapter\r\nimport com.pearlorganisation.figgo.Adapter.CurrentVehicleAdapter\r\nimport com.pearlorganisation.figgo.Adapter.CurrentOneWayKmCountAdapter\r\nimport com.pearlorganisation.figgo.IOnBackPressed\r\nimport com.pearlorganisation.figgo.Model.AdvanceCityCab\r\nimport com.pearlorganisation.figgo.Model.CurrentModel\r\nimport com.pearlorganisation.figgo.Model.CurrentVehicleModel\r\nimport com.pearlorganisation.figgo.R\r\nimport com.pearlorganisation.figgo.databinding.ActivityMainBinding\r\nimport com.pearlorganisation.figgo.databinding.FragmentCurrentCityCabBinding\r\nimport org.json.JSONObject\r\nimport java.net.URI.create\r\nimport java.text.SimpleDateFormat\r\nimport java.time.LocalDateTime\r\nimport java.time.format.DateTimeFormatter\r\nimport java.util.*\r\n\r\n\r\nclass Current_cityCab : Fragment(),IOnBackPressed, OnMapReadyCallback, GoogleMap.OnCameraMoveStartedListener,\r\n    GoogleMap.OnCameraMoveListener,\r\n    GoogleMap.OnCameraMoveCanceledListener,GoogleMap.OnCameraIdleListener  {\r\n\r\n    private val REQUEST_CHECK_SETTINGS: Int=101;\r\n    private lateinit var mMap: GoogleMap\r\n    var PERMISSIONS_REQUEST_ACCESS_FINE_LOCATION=101;\r\n    private lateinit var fusedLocationClient: FusedLocationProviderClient;\r\n    private lateinit var lastLocation: Location;\r\n    private lateinit var locationRequest: LocationRequest;\r\n\r\n    lateinit var binding: FragmentCurrentCityCabBinding\r\n    lateinit var currentVehicleAdapter: CurrentVehicleAdapter\r\n    private lateinit var recyclerView: RecyclerView\r\n    var cablist=ArrayList<CurrentVehicleModel>()\r\n    var mList= ArrayList<CurrentModel>()\r\n    var manualLoc: TextView? = null\r\n    var liveLoc: TextView? = null\r\n    var AUTOCOMPLETE_REQUEST_CODE = -1\r\n    var to_lat :String ?= \"\"\r\n    var from_lat :String ?= \"\"\r\n    var to_lng :String ?= \"\"\r\n    var from_lng :String ?= \"\"\r\n    lateinit var pref: PrefManager\r\n    var current_loc:TextView? = null\r\n    var destination_loc:TextView? = null\r\n    var to_location_name:String ?= null\r\n    var from_location_name:String? = null\r\n    var linear_des:String ? = \" \"\r\n    var live_loc:String ? = \" \"\r\n    var selects : String ?= \"\";\r\n    lateinit var ll_location : LinearLayout\r\n    lateinit var ll_choose_vehicle : LinearLayout\r\n    var press : String ?= \"\";\r\n    var datetext: TextView? = null\r\n    var timetext: TextView? = null\r\n    var progress: ProgressBar? = null\r\n    var nxtbtn: Button? = null\r\n\r\n\r\n    private var currentLocation: Location? = null\r\n    lateinit var locationManager: LocationManager\r\n    private val requestcodes = 2\r\n    private val permissionId = 2\r\n    private var hasGps = false\r\n    private var hasNetwork = false\r\n    private var locationByGps: Location? = null\r\n    private var locationByNetwork: Location? = null\r\n    private var lastKnownLocationByGps: Location? = null\r\n\r\n    private lateinit var mainBinding: ActivityMainBinding\r\n    private lateinit var mFusedLocationClient: FusedLocationProviderClient\r\n    override fun onCreateView(inflater: LayoutInflater, container: ViewGroup?, savedInstanceState: Bundle?): View? {\r\n        binding=DataBindingUtil.inflate(inflater,R.layout.fragment_current_city_cab, container, false)\r\n        return binding.root\r\n    }\r\n\r\n    override fun onViewCreated(view: View, savedInstanceState: Bundle?) {\r\n        super.onViewCreated(view, savedInstanceState)\r\n        pref = PrefManager(requireActivity())\r\n        var calenderimg = view.findViewById<LinearLayout>(R.id.calenderimg)\r\n        datetext = view.findViewById<TextView>(R.id.datetext)\r\n        var watchimg = view?.findViewById<LinearLayout>(R.id.watchimg)\r\n        timetext = view?.findViewById<TextView>(R.id.timetext)\r\n        ll_location = view?.findViewById<LinearLayout>(R.id.ll_location)!!\r\n       ll_choose_vehicle = view?.findViewById<LinearLayout>(R.id.ll_choose_vehicle)!!\r\n        manualLoc = view?.findViewById<TextView>(R.id.loc_manual)\r\n        liveLoc = view?.findViewById<TextView>(R.id.live_loc)\r\n       /* nxtbtn = view.findViewById(R.id.nxtbtn)*/\r\n        progress = view.findViewById<ProgressBar>(R.id.progress)\r\n        val onewayvehiclelist = view.findViewById<RecyclerView>(R.id.onewayvehiclelist)\r\n        var locLinear = view?.findViewById<LinearLayout>(R.id.linear_loc)\r\n        var submit = view?.findViewById<Button>(R.id.submit)\r\n        var destLinear = view?.findViewById<LinearLayout>(R.id.linear_des)\r\n        var advance_li = view?.findViewById<LinearLayout>(R.id.adLinear)\r\n        var map_li = view?.findViewById<RelativeLayout>(R.id.mapLinear)\r\n        var set = view?.findViewById<TextView>(R.id.img_marker)\r\n        ll_choose_vehicle?.isVisible = false\r\n\r\n        map_li?.isVisible = false\r\n        ll_choose_vehicle?.isVisible = false\r\n        pref.setBookingNo(\"\")\r\n        pref.setOtp(\"\")\r\n        pref.setride_id(\"\")\r\n        pref.setVehicleId(\"\")\r\n        val apiKey = getString(R.string.api_key)\r\n        if (!Places.isInitialized()) {\r\n            Places.initialize(requireActivity(), apiKey)\r\n        }\r\n        set?.setOnClickListener {\r\n            advance_li?.isVisible = true\r\n            map_li?.isVisible = false\r\n        }\r\n        locationManager = requireActivity().getSystemService(Context.LOCATION_SERVICE) as LocationManager\r\n        hasGps = locationManager.isProviderEnabled(LocationManager.GPS_PROVIDER)\r\n        hasNetwork = locationManager.isProviderEnabled(LocationManager.NETWORK_PROVIDER)\r\n\r\n        if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.O) {\r\n            val formatter = DateTimeFormatter.ofPattern(\"yyyy-MM-dd\")\r\n            val currentDate = LocalDateTime.now().format(formatter)\r\n            val formated = DateTimeFormatter.ofPattern(\"HH:mm:s\")\r\n            val currentTime = LocalDateTime.now().format(formated)\r\n            datetext?.setText(currentDate)\r\n            timetext?.setText(currentTime)\r\n        } else {\r\n\r\n        }\r\n\r\n        calenderimg.setOnClickListener {\r\n            val c = Calendar.getInstance()\r\n            val year = c.get(Calendar.YEAR)\r\n            val month = c.get(Calendar.MONTH)\r\n            val day = c.get(Calendar.DAY_OF_MONTH)\r\n            val datePickerDialog = context?.let { it1 ->\r\n                DatePickerDialog(\r\n                        it1,\r\n                        { view, year, monthOfYear, dayOfMonth ->\r\n                            val dat : String\r\n                            if (monthOfYear < 9){\r\n                                dat = (year.toString() + \"-0\" + (monthOfYear + 1) + \"-\" + dayOfMonth.toString())\r\n                            }else {\r\n                                dat = (year.toString() + \"-\" + (monthOfYear + 1) + \"-\" + dayOfMonth.toString())\r\n                            }\r\n                            datetext?.setText(dat)\r\n                        },\r\n                        year,\r\n                        month,\r\n                        day\r\n                )\r\n            }\r\n\r\n            if (datePickerDialog != null) {\r\n                datePickerDialog.show()\r\n            }\r\n            watchimg?.setOnClickListener {\r\n                val cal = Calendar.getInstance()\r\n                val timeSetListener = TimePickerDialog.OnTimeSetListener { timePicker, hour, minute ->\r\n                    cal.set(Calendar.HOUR_OF_DAY, hour)\r\n                    cal.set(Calendar.MINUTE, minute)\r\n                    if (timetext != null) {\r\n                        timetext?.text = SimpleDateFormat(\"HH:mm:s\").format(cal.time)\r\n                    }\r\n                }\r\n                TimePickerDialog(context, timeSetListener, cal.get(Calendar.HOUR_OF_DAY), cal.get(Calendar.MINUTE), true).show()\r\n            }\r\n\r\n        }\r\n\r\n        manualLoc?.setOnClickListener {\r\n            press = \"manual\";\r\n            val field = Arrays.asList(Place.Field.ID, Place.Field.ADDRESS, Place.Field.LAT_LNG)\r\n            val intent = Autocomplete.IntentBuilder(AutocompleteActivityMode.FULLSCREEN, field).build(requireActivity())\r\n            startActivityForResult(intent, AUTOCOMPLETE_REQUEST_CODE)\r\n        }\r\n\r\n        liveLoc?.setOnClickListener {\r\n\r\n            press = \"live\";\r\n            val field = Arrays.asList(Place.Field.ID, Place.Field.ADDRESS, Place.Field.LAT_LNG)\r\n            val intent = Autocomplete.IntentBuilder(AutocompleteActivityMode.FULLSCREEN, field)\r\n                    .build(requireActivity())\r\n            startActivityForResult(intent, AUTOCOMPLETE_REQUEST_CODE)\r\n        }\r\n\r\n\r\n\r\n        submit?.setOnClickListener {\r\n            if (to_lat == \"\"){\r\n              //  startActivity(Intent(requireActivity(), OneWay_Km_CountActivity::class.java))\r\n                Toast.makeText(requireActivity(), \"Please select Start Address\", Toast.LENGTH_LONG).show()\r\n            }else if (from_lat == \"\"){\r\n                Toast.makeText(requireActivity(), \"Please select Destination Address\", Toast.LENGTH_LONG).show()\r\n\r\n            }else {\r\n                submitform()\r\n            }\r\n\r\n           /* nxtbtn?.setOnClickListener {\r\n                startActivity(Intent(requireActivity(), MapsActivity1::class.java))\r\n                    *//*vehicle_type_id.setvehicle_type_id(\"vehicle_type_id\")\r\n                    ride_id.setride_id(\"ride_id\")*//*\r\n\r\n            }*/\r\n\r\n        }\r\n        mainBinding = ActivityMainBinding.inflate(layoutInflater)\r\n        mFusedLocationClient = LocationServices.getFusedLocationProviderClient(requireActivity())\r\n\r\n        locLinear?.setOnClickListener {\r\n            val internet :Boolean = isOnline(requireActivity())\r\n            if(internet == true) {\r\n                mainBinding = ActivityMainBinding.inflate(layoutInflater)\r\n                mFusedLocationClient = LocationServices.getFusedLocationProviderClient(requireActivity())\r\n                selects = \"start\"\r\n                if (isLocationPermissionGranted()) {\r\n                    advance_li?.isVisible = false\r\n                    map_li?.isVisible = true\r\n                    val mapFragment = getChildFragmentManager()\r\n                        .findFragmentById(R.id.map) as SupportMapFragment\r\n                    mapFragment.getMapAsync(this)\r\n                    fusedLocationClient = LocationServices.getFusedLocationProviderClient(requireActivity())\r\n                    // startActivity(Intent(requireActivity(), MapsActivity::class.java))\r\n                }else{\r\n                    requestPermissions()\r\n                }\r\n            }else{\r\n\r\n                Toast.makeText(requireActivity(), \"Please turn on internet\", Toast.LENGTH_LONG).show()\r\n\r\n            }\r\n        }\r\n\r\n        destLinear?.setOnClickListener {\r\n            val internet :Boolean = isOnline(requireActivity())\r\n            if(internet == true) {\r\n                mainBinding = ActivityMainBinding.inflate(layoutInflater)\r\n                mFusedLocationClient = LocationServices.getFusedLocationProviderClient(requireActivity())\r\n                selects = \"dest\"\r\n                if (isLocationPermissionGranted()) {\r\n                    advance_li?.isVisible = false\r\n                    map_li?.isVisible = true\r\n                    val mapFragment = getChildFragmentManager()\r\n                        .findFragmentById(R.id.map) as SupportMapFragment\r\n                    mapFragment.getMapAsync(this)\r\n                    fusedLocationClient = LocationServices.getFusedLocationProviderClient(requireActivity())\r\n                }else{\r\n                    requestPermissions()\r\n                }\r\n            }else{\r\n                Toast.makeText(requireActivity(), \"Please turn on internet\", Toast.LENGTH_LONG).show()\r\n\r\n            }\r\n        }\r\n\r\n\r\n       /* cablist.add(AdvanceCityCab(R.drawable.figgo_auto,\"75-100\"))\r\n        cablist.add(AdvanceCityCab(R.drawable.figgo_bike,\"45-65\"))\r\n        cablist.add(AdvanceCityCab(R.drawable.figgo_e_rick,\"25-40\"))\r\n        cablist.add(AdvanceCityCab(R.drawable.figgo_lux,\"125-400\"))*/\r\n     //   advanceCityAdapter=AdvanceCityAdapter(requireActivity(),cablist)\r\n     //   binding.currentCabList.adapter=advanceCityAdapter\r\n\r\n    }\r\n\r\n    private fun submitform() {\r\n        progress?.isVisible = true\r\n        ll_location?.isVisible = false\r\n        ll_choose_vehicle?.isVisible  =false\r\n        val URL = \"https://test.pearl-developer.com/figo/api/ride/create-city-ride\"\r\n        Log.d(\"SendData\", \"URL===\" + URL)\r\n        val queue = Volley.newRequestQueue(requireContext())\r\n        val json = JSONObject()\r\n        json.put(\"date\", datetext?.text.toString())\r\n        json.put(\"time\", timetext?.text.toString())\r\n        json.put(\"to_lat\", to_lat)\r\n        json.put(\"to_lng\", to_lng)\r\n        json.put(\"from_lat\", from_lat)\r\n        json.put(\"from_lng\", from_lng)\r\n        json.put(\"to_location_name\", manualLoc?.text.toString())\r\n        json.put(\"from_location_name\", liveLoc?.text.toString())\r\n        json.put(\"type\",\"current_booking\")\r\n        Log.d(\"SendData\", \"json===\" + json)\r\n        val jsonOblect: JsonObjectRequest = object : JsonObjectRequest(Method.POST, URL, json, object :\r\n                        Response.Listener<JSONObject?>               {\r\n                    override fun onResponse(response: JSONObject?) {\r\n                        Log.d(\"SendData\", \"response===\" + response)\r\n                        if (response != null) {\r\n                            val status = response.getString(\"status\")\r\n                            if(status.equals(\"false\")){\r\n                                Toast.makeText(requireActivity(), \"Something Went Wrong!\", Toast.LENGTH_LONG).show()\r\n                            }else{\r\n                                val data = response.getJSONObject(\"data\")\r\n                                val ride_id = data.getString(\"ride_id\")\r\n                                pref.setride_id(ride_id)\r\n                                val vehicle_types = data.getJSONArray(\"vehicle_types\")\r\n                                for (i in 0 until vehicle_types.length()){\r\n                                    val name = vehicle_types.getJSONObject(i).getString(\"name\")\r\n                                    val image = vehicle_types.getJSONObject(i).getString(\"full_image\")\r\n                                    val id = vehicle_types.getJSONObject(i).getString(\"id\")\r\n                                    val min_price = vehicle_types.getJSONObject(i).getString(\"min_price\")\r\n                                    val max_price = vehicle_types.getJSONObject(i).getString(\"max_price\")\r\n                                    cablist.add(CurrentVehicleModel(name,image,ride_id,id, min_price,max_price))\r\n\r\n                                }\r\n                                currentVehicleAdapter= CurrentVehicleAdapter(requireActivity(),cablist)\r\n                               binding.recylerCabList.adapter=currentVehicleAdapter\r\n                               binding.recylerCabList.layoutManager=GridLayoutManager(context,3)\r\n                                progress?.isVisible = false\r\n                                ll_location?.isVisible = false\r\n                                ll_choose_vehicle?.isVisible  =true\r\n                            }\r\n                        }\r\n\r\n                    }\r\n                }, object : Response.ErrorListener {\r\n                    override fun onErrorResponse(error: VolleyError?) {\r\n                        Log.d(\"SendData\", \"error===\" + error)\r\n                        Toast.makeText(requireActivity(), \"Something Went Wrong!\", Toast.LENGTH_LONG).show()\r\n                    }\r\n                }) {\r\n                    @Throws(AuthFailureError::class)\r\n                    override fun getHeaders(): Map<String, String> {\r\n                        val headers: MutableMap<String, String> = HashMap()\r\n                        headers.put(\"Content-Type\", \"application/json; charset=UTF-8\");\r\n                        headers.put(\"Authorization\", \"Bearer \" + pref.getToken());\r\n                        headers.put(\"Accept\", \"application/vnd.api+json\");\r\n                        return headers\r\n                    }\r\n                }\r\n        jsonOblect.setRetryPolicy(DefaultRetryPolicy(10000, DefaultRetryPolicy.DEFAULT_MAX_RETRIES, DefaultRetryPolicy.DEFAULT_BACKOFF_MULT))\r\n\r\n        queue.add(jsonOblect)\r\n\r\n    }\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n    @SuppressLint(\"MissingPermission\")\r\n    private fun getLocation() {\r\n\r\n        if (isLocationPermissionGranted()){\r\n            if (hasGps) {\r\n                locationManager.requestLocationUpdates(\r\n                    LocationManager.GPS_PROVIDER,\r\n                    5000,\r\n                    0F,\r\n                    gpsLocationListener\r\n                )\r\n            }\r\n//------------------------------------------------------//\r\n            if (hasNetwork) {\r\n                locationManager.requestLocationUpdates(\r\n                    LocationManager.NETWORK_PROVIDER,\r\n                    5000,\r\n                    0F,\r\n                    networkLocationListener\r\n                )\r\n            }\r\n\r\n\r\n            val lastKnownLocationByGps =\r\n                locationManager.getLastKnownLocation(LocationManager.GPS_PROVIDER)\r\n\r\n            // locationByGps = getLastKnownLocation()\r\n            lastKnownLocationByGps?.let {\r\n                locationByGps = lastKnownLocationByGps\r\n            }\r\n            //------------------------------------------------------//\r\n\r\n\r\n            val lastKnownLocationByNetwork = locationManager.getLastKnownLocation(LocationManager.NETWORK_PROVIDER)\r\n            lastKnownLocationByNetwork?.let {\r\n                locationByNetwork = lastKnownLocationByNetwork\r\n            }\r\n//------------------------------------------------------//\r\n            //  if (locationByGps != null || locationByNetwork != null) {\r\n            /*  if (locationByGps!!.accuracy > locationByNetwork!!.accuracy) {\r\n                  if (selects.equals(\"start\")) {\r\n\r\n                      to_lat = locationByGps?.latitude.toString()\r\n                      to_lng = locationByGps?.longitude.toString()\r\n\r\n                      val geocoder: Geocoder\r\n                      val addresses: List<Address>\r\n                      geocoder = Geocoder(requireActivity(), Locale.getDefault())\r\n\r\n                      addresses = locationByGps?.let {\r\n                          geocoder.getFromLocation(\r\n                              it.latitude,\r\n                              it.longitude,1\r\n                          )\r\n                      }!! // Here 1 represent max location result to returned, by documents it recommended 1 to 5\r\n\r\n\r\n                      val address = addresses[0].getAddressLine(0)\r\n                      liveLoc?.setText(address)\r\n                  }else{\r\n\r\n                      from_lat = locationByGps?.latitude.toString()\r\n                      from_lng = locationByGps?.longitude.toString()\r\n\r\n                      val geocoder: Geocoder\r\n                      val addresses: List<Address>\r\n                      geocoder = Geocoder(requireActivity(), Locale.getDefault())\r\n\r\n                      addresses = locationByGps?.let {\r\n                          geocoder.getFromLocation(\r\n                              it.latitude,\r\n                              it.longitude,1\r\n                          )\r\n                      }!! // Here 1 represent max location result to returned, by documents it recommended 1 to 5\r\n\r\n\r\n                      val address = addresses[0].getAddressLine(0)\r\n                      manualLoc?.setText(address)\r\n                  }\r\n                  // use latitude and longitude as per your need\r\n              } else {*/\r\n            if (locationByNetwork == null){\r\n                Toast.makeText(requireActivity(), \"No Network\", Toast.LENGTH_LONG).show()\r\n\r\n            }else {\r\n                if (selects.equals(\"start\")) {\r\n\r\n\r\n                    to_lat = locationByNetwork?.latitude.toString()\r\n                    to_lng = locationByNetwork?.longitude.toString()\r\n                    val geocoder: Geocoder\r\n                    val addresses: List<Address>\r\n                    geocoder = Geocoder(requireActivity(), Locale.getDefault())\r\n\r\n                    addresses = locationByNetwork?.let {\r\n                        geocoder.getFromLocation(\r\n                            it.latitude,\r\n                            it.longitude, 1\r\n                        )\r\n                    }!! // Here 1 represent max location result to returned, by documents it recommended 1 to 5\r\n\r\n\r\n                    val address = addresses[0].getAddressLine(0)\r\n                    liveLoc?.setText(address)\r\n                } else {\r\n\r\n                    from_lat = locationByNetwork?.latitude.toString()\r\n                    from_lng = locationByNetwork?.longitude.toString()\r\n\r\n                    val geocoder: Geocoder\r\n                    val addresses: List<Address>\r\n                    geocoder = Geocoder(requireActivity(), Locale.getDefault())\r\n\r\n                    addresses = locationByNetwork?.let {\r\n                        geocoder.getFromLocation(\r\n                            it.latitude,\r\n                            it.longitude, 1\r\n                        )\r\n                    }!! // Here 1 represent max location result to returned, by documents it recommended 1 to 5\r\n\r\n\r\n                    val address = addresses[0].getAddressLine(0)\r\n                    manualLoc?.setText(address)\r\n                }\r\n            }\r\n            // use latitude and longitude as per your need\r\n            // }\r\n            // }\r\n        }else{\r\n            requestPermissions()\r\n        }\r\n\r\n\r\n        /* if (ActivityCompat.checkSelfPermission(\r\n                 requireActivity(),\r\n                 Manifest.permission.ACCESS_FINE_LOCATION\r\n             ) != PackageManager.PERMISSION_GRANTED && ActivityCompat.checkSelfPermission(\r\n                 requireActivity(),\r\n                 Manifest.permission.ACCESS_COARSE_LOCATION\r\n             ) != PackageManager.PERMISSION_GRANTED\r\n         ) {\r\n             // TODO: Consider calling\r\n             //    ActivityCompat#requestPermissions\r\n             // here to request the missing permissions, and then overriding\r\n             //   public void onRequestPermissionsResult(int requestCode, String[] permissions,\r\n             //                                          int[] grantResults)\r\n             // to handle the case where the user grants the permission. See the documentation\r\n             // for ActivityCompat#requestPermissions for more details.\r\n             return\r\n         }else {\r\n             requestPermissions()\r\n         }checkLocationService\r\n         mFusedLocationClient.lastLocation.addOnCompleteListener(requireActivity()) { task ->\r\n                     val location: Location? = task.result\r\n\r\n                     if (location != null) {\r\n                         val geocoder = Geocoder(requireActivity(), Locale.getDefault())\r\n                         val list: List<Address> =\r\n                             geocoder.getFromLocation(location.latitude, location.longitude, 1) as List<Address>\r\n                         mainBinding.apply {\r\n                             if (selects.equals(\"start\")) {\r\n                                 //   tvLatitude.text = \"Latitude\\n${list[0].latitude}\"\r\n                                  to_lat = \"${list[0].latitude}\"\r\n                                 to_lng = \"${list[0].longitude}\"\r\n                                 // tvCountryName.text = \"Country Name\\n${list[0].countryName}\"\r\n                                 var location: String? = \"${list[0].getAddressLine(0)}\"\r\n                                 liveLoc!!.text = location?.replace(\"133\", \"\")?.replace(\",\",\"\")\r\n                                 //tvAddress.text = \"Address\\n${list[0].getAddressLine(0)}\"\r\n                             }else{\r\n                                     from_lat  = \"${list[0].latitude}\"\r\n                                  from_lng = \"${list[0].longitude}\"\r\n\r\n\r\n                                 var location: String? = \"${list[0].getAddressLine(0)}\"\r\n                                 manualLoc!!.text = location?.replace(\"133\", \"\")?.replace(\",\",\"\")\r\n                                 //tvAddress.text = \"Address\\n${list[0].getAddressLine(0)}\"\r\n                             }\r\n                         }\r\n                     }else{\r\n                         getLocation()\r\n                     }\r\n                 }*/\r\n    }\r\n\r\n\r\n\r\n\r\n\r\n\r\n    override fun onActivityResult(requestCode: Int, resultCode: Int, data: Intent?) {\r\n        super.onActivityResult(requestCode, resultCode, data)\r\n        if (requestCode == AUTOCOMPLETE_REQUEST_CODE) {\r\n            if (resultCode == AppCompatActivity.RESULT_OK) {\r\n                val place = Autocomplete.getPlaceFromIntent(data!!)\r\n                if (press.equals(\"manual\")) {\r\n                    manualLoc!!.setText(place.address)\r\n                    from_lat = place.latLng.latitude.toString()\r\n                    from_lng = place.latLng.longitude.toString()\r\n                }else if (press.equals(\"live\")){\r\n                    to_lat = place.latLng.latitude.toString()\r\n                    to_lng = place.latLng.longitude.toString()\r\n                    liveLoc!!.setText(place.address)\r\n                }\r\n            } else if (resultCode == AutocompleteActivity.RESULT_ERROR) {\r\n                val status = Autocomplete.getStatusFromIntent(\r\n                    data!!\r\n                )\r\n            } else if (resultCode == AppCompatActivity.RESULT_CANCELED) {\r\n            }\r\n        }else if (requestCode == REQUEST_CHECK_SETTINGS) {\r\n            if (resultCode == Activity.RESULT_OK) {\r\n                val result = data!!.getStringExtra(\"result\")\r\n                fetchCurrentLocation();\r\n            }\r\n            else if (resultCode == Activity.RESULT_CANCELED) {\r\n                //Write your code if there's no result\r\n            }\r\n        }\r\n\r\n    }\r\n\r\n    @SuppressLint(\"MissingPermission\")\r\n    fun isOnline(context: Context): Boolean {\r\n        val connectivityManager =\r\n            context.getSystemService(Context.CONNECTIVITY_SERVICE) as ConnectivityManager\r\n        if (connectivityManager != null) {\r\n            val capabilities =\r\n                connectivityManager.getNetworkCapabilities(connectivityManager.activeNetwork)\r\n            if (capabilities != null) {\r\n                if (capabilities.hasTransport(NetworkCapabilities.TRANSPORT_CELLULAR)) {\r\n\r\n                    return true\r\n                } else if (capabilities.hasTransport(NetworkCapabilities.TRANSPORT_WIFI)) {\r\n\r\n                    return true\r\n                } else if (capabilities.hasTransport(NetworkCapabilities.TRANSPORT_ETHERNET)) {\r\n\r\n                    return true\r\n                }\r\n            }\r\n        }\r\n        return false\r\n    }\r\n\r\n    override fun onBackPressed(): Boolean {\r\n\r\n        ll_location?.isVisible = true\r\n        ll_choose_vehicle?.isVisible  =false\r\n\r\n        return true\r\n    }\r\n\r\n    override fun Any.onBackPressed(): Boolean {\r\n\r\n        ll_location?.isVisible = true\r\n        ll_choose_vehicle?.isVisible  =false\r\n\r\n        return true\r\n    }\r\n\r\n\r\n\r\n\r\n\r\n    private fun requestPermissions() {\r\n        ActivityCompat.requestPermissions(\r\n            requireActivity(),\r\n            arrayOf(\r\n                android.Manifest.permission.ACCESS_COARSE_LOCATION,\r\n                android.Manifest.permission.ACCESS_FINE_LOCATION\r\n            ),\r\n            permissionId\r\n        )\r\n    }\r\n\r\n    private fun isLocationPermissionGranted(): Boolean {\r\n        return if (ActivityCompat.checkSelfPermission(\r\n                requireActivity(),\r\n                android.Manifest.permission.ACCESS_COARSE_LOCATION\r\n            ) != PackageManager.PERMISSION_GRANTED && ActivityCompat.checkSelfPermission(\r\n                requireActivity(),\r\n                android.Manifest.permission.ACCESS_FINE_LOCATION\r\n            ) != PackageManager.PERMISSION_GRANTED\r\n        ) {\r\n            ActivityCompat.requestPermissions(\r\n                requireActivity(),\r\n                arrayOf(\r\n                    android.Manifest.permission.ACCESS_FINE_LOCATION,\r\n                    android.Manifest.permission.ACCESS_COARSE_LOCATION\r\n                ),\r\n                requestcodes\r\n            )\r\n            false\r\n        } else {\r\n            true\r\n        }\r\n    }\r\n    val gpsLocationListener: LocationListener = object : LocationListener {\r\n        override fun onLocationChanged(location: Location) {\r\n            locationByGps = location\r\n        }\r\n        override fun onStatusChanged(provider: String, status: Int, extras: Bundle) {}\r\n        override fun onProviderEnabled(provider: String) {}\r\n        override fun onProviderDisabled(provider: String) {}\r\n\r\n    }\r\n    //------------------------------------------------------//\r\n    val networkLocationListener: LocationListener = object : LocationListener {\r\n        override fun onLocationChanged(location: Location) {\r\n            locationByNetwork= location\r\n            // locationByNetwork= location\r\n        }\r\n\r\n        override fun onStatusChanged(provider: String, status: Int, extras: Bundle) {}\r\n        override fun onProviderEnabled(provider: String) {}\r\n        override fun onProviderDisabled(provider: String) {}\r\n    }\r\n\r\n    @SuppressLint(\"MissingPermission\")\r\n    private fun getLastKnownLocation(): Location? {\r\n        locationManager = requireActivity().getSystemService(\r\n            LOCATION_SERVICE\r\n        ) as LocationManager\r\n\r\n        val providers: List<String> = locationManager.getProviders(true)\r\n        var bestLocation: Location? = null\r\n        for (provider in providers) {\r\n            val l: Location = locationManager.getLastKnownLocation(provider) ?: continue\r\n            if (bestLocation == null || l.accuracy < bestLocation.accuracy) {\r\n                // Found best last known location: %s\", l);\r\n                bestLocation = l\r\n            }\r\n        }\r\n        return bestLocation\r\n    }\r\n\r\n    @SuppressLint(\"MissingPermission\")\r\n    override fun onMapReady(googleMap: GoogleMap) {\r\n        mMap = googleMap\r\n\r\n        // Add a marker in Sydney and move the camera\r\n        val sydney = LatLng(-34.0, 151.0)\r\n        mMap.addMarker(MarkerOptions().position(sydney).title(\"Marker in Sydney\"))\r\n        mMap.moveCamera(CameraUpdateFactory.newLatLng(sydney))\r\n        if(Build.VERSION.SDK_INT>=Build.VERSION_CODES.M) {\r\n\r\n            mMap.isMyLocationEnabled = true;\r\n            mMap.uiSettings.isMapToolbarEnabled = true;\r\n            mMap.uiSettings.isMyLocationButtonEnabled = true;\r\n            checkLocationService();\r\n        }\r\n\r\n        mMap.setOnCameraMoveStartedListener (this)\r\n        mMap.setOnCameraIdleListener (this)\r\n        mMap.setOnCameraMoveListener  (this)\r\n\r\n    }\r\n    override fun openSomeActivityForResult(requestCode: Int, permissions: Array<String?>, grantResults: IntArray) {\r\n        super.onRequestPermissionsResult(requestCode, permissions, grantResults)\r\n        if (ContextCompat.checkSelfPermission(requireActivity(),\r\n                android.Manifest.permission.ACCESS_FINE_LOCATION)\r\n            == PackageManager.PERMISSION_GRANTED) {\r\n            mMap.isMyLocationEnabled=true;\r\n            mMap.uiSettings.isMapToolbarEnabled=true;\r\n            mMap.uiSettings.isMyLocationButtonEnabled=true;\r\n            checkLocationService();\r\n        }\r\n    }\r\n\r\n    @SuppressLint(\"MissingPermission\")\r\n    fun fetchCurrentLocation() {\r\n        fusedLocationClient.lastLocation.addOnSuccessListener(requireActivity()) { location ->\r\n            // Got last known location. In some rare situations this can be null.\r\n            // 3\r\n            if (location != null) {\r\n\r\n                if (selects.equals(\"start\")){\r\n                    lastLocation = location\r\n                    val currentLatLng = LatLng(location.latitude, location.longitude)\r\n                    to_lat = location.latitude.toString()\r\n                    to_lng = location.longitude.toString()\r\n\r\n                    val geocoder: Geocoder\r\n                    val addresses: List<Address>\r\n                    geocoder = Geocoder(requireActivity(), Locale.getDefault())\r\n\r\n                    addresses = lastLocation?.let {\r\n                        geocoder.getFromLocation(\r\n                            it.latitude,\r\n                            it.longitude, 1\r\n                        )\r\n                    }!! // Here 1 represent max location result to returned, by documents it recommended 1 to 5\r\n\r\n\r\n                    val address = addresses[0].getAddressLine(0)\r\n                    liveLoc?.setText(address)\r\n\r\n                    mMap.animateCamera(CameraUpdateFactory.newLatLngZoom(currentLatLng, 12f))\r\n                }else{\r\n                    lastLocation = location\r\n                    val currentLatLng = LatLng(location.latitude, location.longitude)\r\n                    from_lat = location.latitude.toString()\r\n                    from_lng = location.longitude.toString()\r\n\r\n\r\n                    val geocoder: Geocoder\r\n                    val addresses: List<Address>\r\n                    geocoder = Geocoder(requireActivity(), Locale.getDefault())\r\n\r\n                    addresses = lastLocation?.let {\r\n                        geocoder.getFromLocation(it.latitude, it.longitude, 1)\r\n                    }!!\r\n\r\n\r\n                    val address = addresses[0].getAddressLine(0)\r\n                    manualLoc?.setText(address)\r\n\r\n                    mMap.animateCamera(CameraUpdateFactory.newLatLngZoom(currentLatLng, 12f))\r\n                }\r\n\r\n            }\r\n        }\r\n    }\r\n    fun checkLocationService() {\r\n\r\n        locationRequest = LocationRequest.create();\r\n        locationRequest.setPriority(LocationRequest.PRIORITY_HIGH_ACCURACY);\r\n        locationRequest.setInterval(10 * 1000);\r\n        locationRequest.setFastestInterval(2 * 1000);\r\n\r\n\r\n        val builder = LocationSettingsRequest.Builder().addLocationRequest(locationRequest);\r\n        // builder.setAlwaysShow(true);\r\n        val client = LocationServices.getSettingsClient(requireActivity())\r\n        val task = client.checkLocationSettings(builder.build())\r\n        task.addOnSuccessListener(requireActivity()) {it->\r\n            it.locationSettingsStates;\r\n            fetchCurrentLocation();\r\n        }\r\n\r\n        task.addOnFailureListener(requireActivity()) { e ->\r\n            if (e is ResolvableApiException) {\r\n\r\n                try {\r\n\r\n                    e.startResolutionForResult(requireActivity(), REQUEST_CHECK_SETTINGS)\r\n                } catch (sendEx: IntentSender.SendIntentException) {\r\n                    // Ignore the error.\r\n                }\r\n\r\n            }\r\n        }\r\n    }\r\n\r\n    override fun onCameraMoveStarted(p0: Int) {\r\n        Log.v(\"Onmove start\",\"Onmove \"+p0);\r\n        mMap.clear()\r\n    }\r\n\r\n    override fun onCameraMove() {\r\n\r\n        Log.v(\"Onmove \",\"Onmove \");\r\n    }\r\n\r\n    override fun onCameraMoveCanceled() {\r\n        Log.v(\"Onmove cancel\",\"Onmove \");\r\n    }\r\n\r\n    override fun onCameraIdle() {\r\n        Log.v(\"Onmove Idle\",\"Onmove \");\r\n        val markerOptions = MarkerOptions().position(mMap.cameraPosition.target)\r\n\r\n        mMap.addMarker(markerOptions)\r\n        val position: LatLng = markerOptions.getPosition()\r\n\r\n\r\n        if (selects.equals(\"start\")){\r\n\r\n            to_lat = position.latitude.toString()\r\n            to_lng = position.longitude.toString()\r\n\r\n            val geocoder: Geocoder\r\n            val addresses: List<Address>\r\n            geocoder = Geocoder(requireActivity(), Locale.getDefault())\r\n\r\n            addresses = position?.let {\r\n                geocoder.getFromLocation(it.latitude, it.longitude, 1)\r\n            }!!\r\n\r\n\r\n            val address = addresses[0].getAddressLine(0)\r\n            liveLoc?.setText(address)\r\n\r\n\r\n        }else{\r\n\r\n            from_lat = position.latitude.toString()\r\n            from_lng = position.longitude.toString()\r\n\r\n\r\n            val geocoder: Geocoder\r\n            val addresses: List<Address>\r\n            geocoder = Geocoder(requireActivity(), Locale.getDefault())\r\n\r\n            addresses = position?.let {\r\n                geocoder.getFromLocation(it.latitude, it.longitude, 1)\r\n            }!!\r\n\r\n\r\n            val address = addresses[0].getAddressLine(0)\r\n            manualLoc?.setText(address)\r\n\r\n        }\r\n    }\r\n\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/com/pearlorganisation/figgo/UI/Fragments/Current_cityCab.kt b/app/src/main/java/com/pearlorganisation/figgo/UI/Fragments/Current_cityCab.kt
--- a/app/src/main/java/com/pearlorganisation/figgo/UI/Fragments/Current_cityCab.kt	(revision fab82203368abdd7a031ee01b2b3cd09d54de347)
+++ b/app/src/main/java/com/pearlorganisation/figgo/UI/Fragments/Current_cityCab.kt	(date 1673933979519)
@@ -136,10 +136,10 @@
         var watchimg = view?.findViewById<LinearLayout>(R.id.watchimg)
         timetext = view?.findViewById<TextView>(R.id.timetext)
         ll_location = view?.findViewById<LinearLayout>(R.id.ll_location)!!
-       ll_choose_vehicle = view?.findViewById<LinearLayout>(R.id.ll_choose_vehicle)!!
+        ll_choose_vehicle = view?.findViewById<LinearLayout>(R.id.ll_choose_vehicle)!!
         manualLoc = view?.findViewById<TextView>(R.id.loc_manual)
         liveLoc = view?.findViewById<TextView>(R.id.live_loc)
-       /* nxtbtn = view.findViewById(R.id.nxtbtn)*/
+        /* nxtbtn = view.findViewById(R.id.nxtbtn)*/
         progress = view.findViewById<ProgressBar>(R.id.progress)
         val onewayvehiclelist = view.findViewById<RecyclerView>(R.id.onewayvehiclelist)
         var locLinear = view?.findViewById<LinearLayout>(R.id.linear_loc)
@@ -154,7 +154,7 @@
         ll_choose_vehicle?.isVisible = false
         pref.setBookingNo("")
         pref.setOtp("")
-        pref.setride_id("")
+        pref.setRideId("")
         pref.setVehicleId("")
         val apiKey = getString(R.string.api_key)
         if (!Places.isInitialized()) {
@@ -186,19 +186,19 @@
             val day = c.get(Calendar.DAY_OF_MONTH)
             val datePickerDialog = context?.let { it1 ->
                 DatePickerDialog(
-                        it1,
-                        { view, year, monthOfYear, dayOfMonth ->
-                            val dat : String
-                            if (monthOfYear < 9){
-                                dat = (year.toString() + "-0" + (monthOfYear + 1) + "-" + dayOfMonth.toString())
-                            }else {
-                                dat = (year.toString() + "-" + (monthOfYear + 1) + "-" + dayOfMonth.toString())
-                            }
-                            datetext?.setText(dat)
-                        },
-                        year,
-                        month,
-                        day
+                    it1,
+                    { view, year, monthOfYear, dayOfMonth ->
+                        val dat : String
+                        if (monthOfYear < 9){
+                            dat = (year.toString() + "-0" + (monthOfYear + 1) + "-" + dayOfMonth.toString())
+                        }else {
+                            dat = (year.toString() + "-" + (monthOfYear + 1) + "-" + dayOfMonth.toString())
+                        }
+                        datetext?.setText(dat)
+                    },
+                    year,
+                    month,
+                    day
                 )
             }
 
@@ -231,7 +231,7 @@
             press = "live";
             val field = Arrays.asList(Place.Field.ID, Place.Field.ADDRESS, Place.Field.LAT_LNG)
             val intent = Autocomplete.IntentBuilder(AutocompleteActivityMode.FULLSCREEN, field)
-                    .build(requireActivity())
+                .build(requireActivity())
             startActivityForResult(intent, AUTOCOMPLETE_REQUEST_CODE)
         }
 
@@ -239,7 +239,7 @@
 
         submit?.setOnClickListener {
             if (to_lat == ""){
-              //  startActivity(Intent(requireActivity(), OneWay_Km_CountActivity::class.java))
+                //  startActivity(Intent(requireActivity(), OneWay_Km_CountActivity::class.java))
                 Toast.makeText(requireActivity(), "Please select Start Address", Toast.LENGTH_LONG).show()
             }else if (from_lat == ""){
                 Toast.makeText(requireActivity(), "Please select Destination Address", Toast.LENGTH_LONG).show()
@@ -248,9 +248,9 @@
                 submitform()
             }
 
-           /* nxtbtn?.setOnClickListener {
-                startActivity(Intent(requireActivity(), MapsActivity1::class.java))
-                    *//*vehicle_type_id.setvehicle_type_id("vehicle_type_id")
+            /* nxtbtn?.setOnClickListener {
+                 startActivity(Intent(requireActivity(), MapsActivity1::class.java))
+                     *//*vehicle_type_id.setvehicle_type_id("vehicle_type_id")
                     ride_id.setride_id("ride_id")*//*
 
             }*/
@@ -306,12 +306,12 @@
         }
 
 
-       /* cablist.add(AdvanceCityCab(R.drawable.figgo_auto,"75-100"))
-        cablist.add(AdvanceCityCab(R.drawable.figgo_bike,"45-65"))
-        cablist.add(AdvanceCityCab(R.drawable.figgo_e_rick,"25-40"))
-        cablist.add(AdvanceCityCab(R.drawable.figgo_lux,"125-400"))*/
-     //   advanceCityAdapter=AdvanceCityAdapter(requireActivity(),cablist)
-     //   binding.currentCabList.adapter=advanceCityAdapter
+        /* cablist.add(AdvanceCityCab(R.drawable.figgo_auto,"75-100"))
+         cablist.add(AdvanceCityCab(R.drawable.figgo_bike,"45-65"))
+         cablist.add(AdvanceCityCab(R.drawable.figgo_e_rick,"25-40"))
+         cablist.add(AdvanceCityCab(R.drawable.figgo_lux,"125-400"))*/
+        //   advanceCityAdapter=AdvanceCityAdapter(requireActivity(),cablist)
+        //   binding.currentCabList.adapter=advanceCityAdapter
 
     }
 
@@ -334,52 +334,51 @@
         json.put("type","current_booking")
         Log.d("SendData", "json===" + json)
         val jsonOblect: JsonObjectRequest = object : JsonObjectRequest(Method.POST, URL, json, object :
-                        Response.Listener<JSONObject?>               {
-                    override fun onResponse(response: JSONObject?) {
-                        Log.d("SendData", "response===" + response)
-                        if (response != null) {
-                            val status = response.getString("status")
-                            if(status.equals("false")){
-                                Toast.makeText(requireActivity(), "Something Went Wrong!", Toast.LENGTH_LONG).show()
-                            }else{
-                                val data = response.getJSONObject("data")
-                                val ride_id = data.getString("ride_id")
-                                pref.setride_id(ride_id)
-                                val vehicle_types = data.getJSONArray("vehicle_types")
-                                for (i in 0 until vehicle_types.length()){
-                                    val name = vehicle_types.getJSONObject(i).getString("name")
-                                    val image = vehicle_types.getJSONObject(i).getString("full_image")
-                                    val id = vehicle_types.getJSONObject(i).getString("id")
-                                    val min_price = vehicle_types.getJSONObject(i).getString("min_price")
-                                    val max_price = vehicle_types.getJSONObject(i).getString("max_price")
-                                    cablist.add(CurrentVehicleModel(name,image,ride_id,id, min_price,max_price))
+            Response.Listener<JSONObject?>               {
+            override fun onResponse(response: JSONObject?) {
+                Log.d("SendData", "response===" + response)
+                if (response != null) {
+                    val status = response.getString("status")
+                    if(status.equals("false")){
+                        Toast.makeText(requireActivity(), "Something Went Wrong!", Toast.LENGTH_LONG).show()
+                    }else{
+                        val data = response.getJSONObject("data")
+                        val ride_id = data.getString("ride_id")
+                        pref.setRideId(ride_id)
+                        val vehicle_types = data.getJSONArray("vehicle_types")
+                        for (i in 0 until vehicle_types.length()){
+                            val name = vehicle_types.getJSONObject(i).getString("name")
+                            val image = vehicle_types.getJSONObject(i).getString("full_image")
+                            val id = vehicle_types.getJSONObject(i).getString("id")
+                            val min_price = vehicle_types.getJSONObject(i).getString("min_price")
+                            val max_price = vehicle_types.getJSONObject(i).getString("max_price")
+                            cablist.add(CurrentVehicleModel(name,image,ride_id,id, min_price,max_price))
 
-                                }
-                                currentVehicleAdapter= CurrentVehicleAdapter(requireActivity(),cablist)
-                               binding.recylerCabList.adapter=currentVehicleAdapter
-                               binding.recylerCabList.layoutManager=GridLayoutManager(context,3)
-                                progress?.isVisible = false
-                                ll_location?.isVisible = false
-                                ll_choose_vehicle?.isVisible  =true
-                            }
-                        }
+                        }
+                        currentVehicleAdapter= CurrentVehicleAdapter(requireActivity(),cablist)
+                        binding.recylerCabList.adapter=currentVehicleAdapter
+                        binding.recylerCabList.layoutManager=GridLayoutManager(context,3)
+                        progress?.isVisible = false
+                        ll_location?.isVisible = false
+                        ll_choose_vehicle?.isVisible  =true
+                    }
+                }
 
-                    }
-                }, object : Response.ErrorListener {
-                    override fun onErrorResponse(error: VolleyError?) {
-                        Log.d("SendData", "error===" + error)
-                        Toast.makeText(requireActivity(), "Something Went Wrong!", Toast.LENGTH_LONG).show()
-                    }
-                }) {
-                    @Throws(AuthFailureError::class)
-                    override fun getHeaders(): Map<String, String> {
-                        val headers: MutableMap<String, String> = HashMap()
-                        headers.put("Content-Type", "application/json; charset=UTF-8");
-                        headers.put("Authorization", "Bearer " + pref.getToken());
-                        headers.put("Accept", "application/vnd.api+json");
-                        return headers
-                    }
-                }
+            }
+        }, object : Response.ErrorListener {
+            override fun onErrorResponse(error: VolleyError?) {
+                Log.d("SendData", "error===" + error)
+                Toast.makeText(requireActivity(), "Something Went Wrong!", Toast.LENGTH_LONG).show()
+            }
+        }) {
+            @Throws(AuthFailureError::class)
+            override fun getHeaders(): Map<String, String> {
+                val headers: MutableMap<String, String> = HashMap()
+                headers.put("Content-Type", "application/json; charset=UTF-8");
+                headers.put("Authorization", "Bearer " + pref.getToken());
+                return headers
+            }
+        }
         jsonOblect.setRetryPolicy(DefaultRetryPolicy(10000, DefaultRetryPolicy.DEFAULT_MAX_RETRIES, DefaultRetryPolicy.DEFAULT_BACKOFF_MULT))
 
         queue.add(jsonOblect)
@@ -637,7 +636,6 @@
     }
 
     override fun onBackPressed(): Boolean {
-
         ll_location?.isVisible = true
         ll_choose_vehicle?.isVisible  =false
 
@@ -645,15 +643,8 @@
     }
 
     override fun Any.onBackPressed(): Boolean {
-
-        ll_location?.isVisible = true
-        ll_choose_vehicle?.isVisible  =false
-
-        return true
+        TODO("Not yet implemented")
     }
-
-
-
 
 
     private fun requestPermissions() {
Index: app/src/main/java/com/pearlorganisation/figgo/CurrentMap/MapsActivity1.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.pearlorganisation.figgo.CurrentMap\r\n\r\nimport android.content.Intent\r\nimport android.os.Bundle\r\nimport android.util.Log\r\nimport android.widget.*\r\nimport androidx.recyclerview.widget.LinearLayoutManager\r\nimport androidx.recyclerview.widget.RecyclerView\r\nimport com.android.volley.AuthFailureError\r\nimport com.android.volley.DefaultRetryPolicy\r\nimport com.android.volley.Response\r\nimport com.android.volley.VolleyError\r\nimport com.android.volley.toolbox.JsonObjectRequest\r\nimport com.android.volley.toolbox.Volley\r\nimport com.google.android.gms.maps.*\r\nimport com.google.android.gms.maps.model.LatLng\r\nimport com.google.android.gms.maps.model.Marker\r\nimport com.google.android.gms.maps.model.MarkerOptions\r\nimport com.pearlorganisation.PrefManager\r\nimport com.pearlorganisation.figgo.Adapter.CurrentOneWayKmCountAdapter\r\nimport com.pearlorganisation.figgo.BaseClass\r\nimport com.pearlorganisation.figgo.Model.OneWayListRatingVehicle\r\nimport com.pearlorganisation.figgo.R\r\nimport com.pearlorganisation.figgo.UI.DashBoard\r\nimport com.pearlorganisation.figgo.databinding.ActivityMaps1Binding\r\nimport org.json.JSONObject\r\nimport java.util.HashMap\r\n\r\nclass MapsActivity1 : BaseClass(), OnMapReadyCallback, GoogleMap.OnMarkerClickListener {\r\n\r\n    private lateinit var mMap: GoogleMap\r\n    private lateinit var binding: ActivityMaps1Binding\r\n    lateinit var currentOneWayKmCountAdapter: CurrentOneWayKmCountAdapter\r\n    lateinit var pref: PrefManager\r\n    lateinit var latLng: LatLng\r\n    val mList = ArrayList<OneWayListRatingVehicle>()\r\n    lateinit var fragment: SupportMapFragment\r\n    lateinit var cab_name : String\r\n    lateinit var driver_id : String\r\n    lateinit var pricestring : String\r\n    lateinit var cab_drivers : String\r\n    lateinit var ride : String\r\n    lateinit var year : String\r\n    lateinit var rating : String\r\n    override fun setLayoutXml() {\r\n        TODO(\"Not yet implemented\")\r\n    }\r\n\r\n    override fun initializeViews() {\r\n        TODO(\"Not yet implemented\")\r\n    }\r\n\r\n    override fun initializeClickListners() {\r\n        TODO(\"Not yet implemented\")\r\n    }\r\n\r\n    override fun initializeInputs() {\r\n        TODO(\"Not yet implemented\")\r\n    }\r\n\r\n    override fun initializeLabels() {\r\n        TODO(\"Not yet implemented\")\r\n    }\r\n\r\n\r\n    override fun onCreate(savedInstanceState: Bundle?) {\r\n        super.onCreate(savedInstanceState)\r\n        binding = ActivityMaps1Binding.inflate(layoutInflater)\r\n        setContentView(binding.root)\r\n        shareimg()\r\n        onBackPress()\r\n        var id = intent.getStringExtra(\"id\")\r\n        var ride_id = intent.getStringExtra(\"ride_id\")\r\n        var driver_id = intent.getStringExtra(\"driver_id\")\r\n        pref  = PrefManager(this)\r\n        var ll_accept = findViewById<LinearLayout>(R.id.ll_accept)\r\n        val onewayvehiclelist = findViewById<RecyclerView>(R.id.onewayvehiclelist)\r\n        var shareimg = findViewById<ImageView>(R.id.shareimg)\r\n        var backimg = findViewById<ImageView>(R.id.backimg)\r\n        var progress = findViewById<ProgressBar>(R.id.progress)\r\n        var backtxt = findViewById<TextView>(R.id.backtxt)\r\n\r\n        getcablist(id,ride_id)\r\n        /*getAccept()*/\r\n\r\n\r\n        backtxt.setOnClickListener {\r\n            startActivity(Intent(this,DashBoard::class.java))\r\n        }\r\n\r\n        backimg.setOnClickListener {\r\n            startActivity(Intent(this,DashBoard::class.java))\r\n        }\r\n\r\n\r\n\r\n      /*  mList.add(OneWayListRatingVehicle(\"Activa - 2012\",\"raingcountlist\",\"ride_service_rating\",\"Reject\",\"Accept\",\"min_price\",\"vehicle_detail\",\"year\",\"\"))\r\n        mList.add(OneWayListRatingVehicle(\"Activa - 2012\",\"raingcountlist\",\"ride_service_rating\",\"Reject\",\"Accept\",\"min_price\",\"vehicle_detail\",\"year\",\"\"))\r\n        mList.add(OneWayListRatingVehicle(\"Activa - 2012\",\"raingcountlist\",\"ride_service_rating\",\"Reject\",\"Accept\",\"min_price\",\"vehicle_detail\",\"year\",\"\"))\r\n        mList.add(OneWayListRatingVehicle(\"Activa - 2012\",\"raingcountlist\",\"ride_service_rating\",\"Reject\",\"Accept\",\"min_price\",\"vehicle_detail\",\"year\",\"\"))\r\n        mList.add(OneWayListRatingVehicle(\"Activa - 2012\",\"raingcountlist\",\"ride_service_rating\",\"Reject\",\"Accept\",\"min_price\",\"vehicle_detail\",\"year\",\"\"))\r\n        mList.add(OneWayListRatingVehicle(\"Activa - 2012\",\"raingcountlist\",\"ride_service_rating\",\"Reject\",\"Accept\",\"min_price\",\"vehicle_detail\",\"year\",\"\"))\r\n        mList.add(OneWayListRatingVehicle(\"Activa - 2012\",\"raingcountlist\",\"ride_service_rating\",\"Reject\",\"Accept\",\"min_price\",\"vehicle_detail\",\"year\",\"\"))\r\n        mList.add(OneWayListRatingVehicle(\"Activa - 2012\",\"raingcountlist\",\"ride_service_rating\",\"Reject\",\"Accept\",\"min_price\",\"vehicle_detail\",\"year\",\"\"))\r\n        mList.add(OneWayListRatingVehicle(\"Activa - 2012\",\"raingcountlist\",\"ride_service_rating\",\"Reject\",\"Accept\",\"min_price\",\"vehicle_detail\",\"year\",\"\"))\r\n        mList.add(OneWayListRatingVehicle(\"Activa - 2012\",\"raingcountlist\",\"ride_service_rating\",\"Reject\",\"Accept\",\"min_price\",\"vehicle_detail\",\"year\",\"\"))*/\r\n\r\n       /* currentOneWayKmCountAdapter= CurrentOneWayKmCountAdapter(this@MapsActivity1,mList)\r\n        binding.onewayvehiclelist.adapter=currentOneWayKmCountAdapter\r\n        binding.onewayvehiclelist.layoutManager=LinearLayoutManager(this@MapsActivity1)*/\r\n\r\n\r\n       // val mapFragment = supportFragmentManager.findFragmentById(R.id.map) as SupportMapFragment\r\n      //  mapFragment.getMapAsync(this)\r\n    }\r\n\r\n    private fun getcablist(id: String?, ride_id: String?) {\r\n        val URL = \"https://test.pearl-developer.com/figo/api/ride/select-city-vehicle-type\"\r\n        Log.d(\"SendData\", \"URL===\" + URL)\r\n        val queue = Volley.newRequestQueue(this)\r\n        val json = JSONObject()\r\n        json.put(\"vehicle_type_id\", id)\r\n        json.put(\"ride_id\",ride_id)\r\n        Log.d(\"SendData\", \"json===\" + json)\r\n        val jsonOblect: JsonObjectRequest = object : JsonObjectRequest(Method.POST, URL, json, object :\r\n            Response.Listener<JSONObject?>               {\r\n            override fun onResponse(response: JSONObject?) {\r\n                Log.d(\"SendData\", \"response===\" + response)\r\n                if (response != null) {\r\n                    val status = response.getString(\"status\")\r\n                    if(status.equals(\"false\")){\r\n                        Toast.makeText(this@MapsActivity1, \"Something Went Wrong!\", Toast.LENGTH_LONG).show()\r\n                    }else{\r\n                        getnxtpage()\r\n                      //  Toast.makeText(this@MapsActivity1, \"true\", Toast.LENGTH_LONG).show()\r\n\r\n                    }\r\n                }\r\n\r\n            }\r\n        }, object : Response.ErrorListener {\r\n            override fun onErrorResponse(error: VolleyError?) {\r\n                Log.d(\"SendData\", \"error===\" + error)\r\n                Toast.makeText(this@MapsActivity1, \"Something Went Wrong!\", Toast.LENGTH_LONG).show()\r\n            }\r\n        }) {\r\n            @Throws(AuthFailureError::class)\r\n            override fun getHeaders(): Map<String, String> {\r\n                val headers: MutableMap<String, String> = HashMap()\r\n                headers.put(\"Content-Type\", \"application/json; charset=UTF-8\")\r\n                headers.put(\"Authorization\", \"Bearer \" + pref.getToken())\r\n                headers.put(\"Accept\", \"application/vnd.api+json\");\r\n                return headers\r\n            }\r\n        }\r\n        jsonOblect.setRetryPolicy(DefaultRetryPolicy(10000, DefaultRetryPolicy.DEFAULT_MAX_RETRIES, DefaultRetryPolicy.DEFAULT_BACKOFF_MULT))\r\n\r\n        queue.add(jsonOblect)\r\n\r\n\r\n    }\r\n\r\n\r\n    override fun onMapReady(googleMap: GoogleMap) {\r\n\r\n        mMap = googleMap\r\n        val myLocation = LatLng(30.302810, 78.012234)\r\n        mMap.addMarker(MarkerOptions().position(myLocation).title(\"Marker in India\"))\r\n        mMap.moveCamera(CameraUpdateFactory.newLatLng(myLocation))\r\n        mMap.uiSettings.isZoomControlsEnabled = true\r\n\r\n        mMap.setOnMapClickListener(object :GoogleMap.OnMapClickListener {\r\n            override fun onMapClick(latlng: LatLng) {\r\n                mMap.clear()\r\n                mMap.animateCamera(CameraUpdateFactory.newLatLng(latLng))\r\n                val location = LatLng(latlng.latitude, latlng.longitude)\r\n                mMap.addMarker(MarkerOptions().position(location))\r\n            }\r\n        })\r\n    }\r\n\r\n    override fun onMarkerClick(p0: Marker): Boolean {\r\n        TODO(\"Not yet implemented\")\r\n    }\r\n\r\n   private fun getnxtpage() {\r\n        val URL = \"https://test.pearl-developer.com/figo/api/ride/get-nearby-drivers\"\r\n       Log.d(\"SendData\", \"URL===\" + URL)\r\n        val queue = Volley.newRequestQueue(this)\r\n        val json = JSONObject()\r\n        json.put(\"ride_id\",pref.getride_id())\r\n        /*json.put(\"ride_id\",\"33\")*/\r\n      //  json.put(\"type\",\"current_booking\")\r\n       Log.d(\"SendData\", \"pref.getToken()===\" + pref.getToken())\r\n       Log.d(\"SendData\", \"json===\" + json)\r\n        val jsonOblect: JsonObjectRequest = object : JsonObjectRequest(Method.POST, URL, json, object :\r\n            Response.Listener<JSONObject?>               {\r\n            override fun onResponse(response: JSONObject?) {\r\n                Log.d(\"SendData\", \"response===\" + response)\r\n                if (response != null) {\r\n                    val status = response.getString(\"status\")\r\n                    if (response != null) {\r\n                        val cabs = response.getJSONObject(\"data\").getJSONArray(\"cabs\")\r\n                        val ride = response.getJSONObject(\"data\").getJSONObject(\"ride\").getString(\"id\")\r\n\r\n                        for(p2 in 0 until cabs.length()) {\r\n                            val data=response.getJSONObject(\"data\").getJSONArray(\"cabs\").getJSONObject(p2)\r\n                            cab_name=data.getString( \"cab\")\r\n                            pricestring=data.getString( \"price\")\r\n                              val cab_driversArray = data.getJSONArray(\"cab_drivers\")\r\n                           for (i in 0 until cab_driversArray.length()){\r\n\r\n                               val jsonObject = cab_driversArray.getJSONObject(i)\r\n                               driver_id =    jsonObject.getString(\"driver_id\")\r\n                             year =    jsonObject.getString(\"year\")\r\n                              rating=  jsonObject.getJSONObject(\"driver\").getString(\"rating_avg\")\r\n\r\n                           }\r\n                            mList.add(OneWayListRatingVehicle(driver_id,cab_name,year,pricestring, rating,ride,))\r\n\r\n                        }\r\n                        currentOneWayKmCountAdapter = CurrentOneWayKmCountAdapter(this@MapsActivity1,mList)\r\n                        binding.onewayvehiclelist.layoutManager=LinearLayoutManager(this@MapsActivity1)\r\n                        binding.onewayvehiclelist.adapter=currentOneWayKmCountAdapter\r\n                    }\r\n                }\r\n            }\r\n        }, object : Response.ErrorListener {\r\n            override fun onErrorResponse(error: VolleyError?) {\r\n                Log.d(\"SendData\", \"error===\" + error)\r\n                Toast.makeText(this@MapsActivity1, \"Something Went Wrong!\", Toast.LENGTH_LONG).show()\r\n            }\r\n        }) {\r\n            @Throws(AuthFailureError::class)\r\n            override fun getHeaders(): Map<String, String> {\r\n                val headers: MutableMap<String, String> = HashMap()\r\n                headers.put(\"Content-Type\", \"application/json; charset=UTF-8\")\r\n                headers.put(\"Authorization\", \"Bearer \" + pref.getToken())\r\n                headers.put(\"Accept\", \"application/vnd.api+json\");\r\n                return headers\r\n            }\r\n        }\r\n        jsonOblect.setRetryPolicy(DefaultRetryPolicy(10000, DefaultRetryPolicy.DEFAULT_MAX_RETRIES, DefaultRetryPolicy.DEFAULT_BACKOFF_MULT))\r\n\r\n        queue.add(jsonOblect)\r\n\r\n    }\r\n\r\n\r\n   /* private fun getAccept() {\r\n        val URL = \"https://test.pearl-developer.com/figo/api/ride/select-driver\"\r\n        Log.d(\"SendData\", \"URL===\" + URL)\r\n        val queue = Volley.newRequestQueue(this)\r\n        val json = JSONObject()\r\n        json.put(\"ride_id\",pref.getride_id())\r\n        json.put(\"driver_id\",pref.getdriver_id())\r\n        json.put(\"price\",pref.getprice())\r\n        Log.d(\"SendData\", \"pref.getToken()===\" + pref.getToken())\r\n        Log.d(\"SendData\", \"json===\" + json)\r\n        val jsonOblect: JsonObjectRequest = object : JsonObjectRequest(Method.POST, URL, json, object :\r\n            Response.Listener<JSONObject?>               {\r\n            override fun onResponse(response: JSONObject?) {\r\n                Log.d(\"SendData\", \"response===\" + response)\r\n                if (response != null) {\r\n                    val status = response.getString(\"status\")\r\n                    if(status.equals(\"false\")){\r\n                        Toast.makeText(this@MapsActivity1, \"Something Went Wrong!\", Toast.LENGTH_LONG).show()\r\n                    }else{\r\n                        getnxtpage()\r\n\r\n\r\n                    }\r\n                }\r\n\r\n            }\r\n        }, object : Response.ErrorListener {\r\n            override fun onErrorResponse(error: VolleyError?) {\r\n                Log.d(\"SendData\", \"error===\" + error)\r\n                Toast.makeText(this@MapsActivity1, \"Something Went Wrong!\", Toast.LENGTH_LONG).show()\r\n            }\r\n        }) {\r\n            @Throws(AuthFailureError::class)\r\n            override fun getHeaders(): Map<String, String> {\r\n                val headers: MutableMap<String, String> = HashMap()\r\n                headers.put(\"Content-Type\", \"application/json; charset=UTF-8\")\r\n                headers.put(\"Authorization\", \"Bearer \" + pref.getToken())\r\n                return headers\r\n            }\r\n        }\r\n        jsonOblect.setRetryPolicy(DefaultRetryPolicy(10000, DefaultRetryPolicy.DEFAULT_MAX_RETRIES, DefaultRetryPolicy.DEFAULT_BACKOFF_MULT))\r\n\r\n        queue.add(jsonOblect)\r\n\r\n    }*/\r\n\r\n    override fun onBackPressed() {\r\n        super.onBackPressed()\r\n        startActivity(Intent(this, DashBoard::class.java))\r\n    }\r\n\r\n}\r\n\r\n\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/com/pearlorganisation/figgo/CurrentMap/MapsActivity1.kt b/app/src/main/java/com/pearlorganisation/figgo/CurrentMap/MapsActivity1.kt
--- a/app/src/main/java/com/pearlorganisation/figgo/CurrentMap/MapsActivity1.kt	(revision fab82203368abdd7a031ee01b2b3cd09d54de347)
+++ b/app/src/main/java/com/pearlorganisation/figgo/CurrentMap/MapsActivity1.kt	(date 1673933999861)
@@ -42,6 +42,9 @@
     lateinit var ride : String
     lateinit var year : String
     lateinit var rating : String
+
+
+
     override fun setLayoutXml() {
         TODO("Not yet implemented")
     }
@@ -188,7 +191,7 @@
        Log.d("SendData", "URL===" + URL)
         val queue = Volley.newRequestQueue(this)
         val json = JSONObject()
-        json.put("ride_id",pref.getride_id())
+        json.put("ride_id",pref.getRideId())
         /*json.put("ride_id","33")*/
       //  json.put("type","current_booking")
        Log.d("SendData", "pref.getToken()===" + pref.getToken())
@@ -199,30 +202,28 @@
                 Log.d("SendData", "response===" + response)
                 if (response != null) {
                     val status = response.getString("status")
-                    if (response != null) {
-                        val cabs = response.getJSONObject("data").getJSONArray("cabs")
-                        val ride = response.getJSONObject("data").getJSONObject("ride").getString("id")
+                    val cabs = response.getJSONObject("data").getJSONArray("cabs")
+                    val ride = response.getJSONObject("data").getJSONObject("ride").getString("id")
 
-                        for(p2 in 0 until cabs.length()) {
-                            val data=response.getJSONObject("data").getJSONArray("cabs").getJSONObject(p2)
-                            cab_name=data.getString( "cab")
-                            pricestring=data.getString( "price")
-                              val cab_driversArray = data.getJSONArray("cab_drivers")
-                           for (i in 0 until cab_driversArray.length()){
+                    for(p2 in 0 until cabs.length()) {
+                        val data=response.getJSONObject("data").getJSONArray("cabs").getJSONObject(p2)
+                        cab_name=data.getString( "cab")
+                        pricestring=data.getString( "price")
+                          val cab_driversArray = data.getJSONArray("cab_drivers")
+                       for (i in 0 until cab_driversArray.length()){
 
-                               val jsonObject = cab_driversArray.getJSONObject(i)
-                               driver_id =    jsonObject.getString("driver_id")
-                             year =    jsonObject.getString("year")
-                              rating=  jsonObject.getJSONObject("driver").getString("rating_avg")
-
-                           }
-                            mList.add(OneWayListRatingVehicle(driver_id,cab_name,year,pricestring, rating,ride,))
+                           val jsonObject = cab_driversArray.getJSONObject(i)
+                           driver_id =    jsonObject.getString("driver_id")
+                         year =    jsonObject.getString("year")
+                          rating=  jsonObject.getJSONObject("driver").getString("rating_avg")
+                           mList.add(OneWayListRatingVehicle(driver_id,cab_name,year,pricestring, rating,ride,))
 
-                        }
-                        currentOneWayKmCountAdapter = CurrentOneWayKmCountAdapter(this@MapsActivity1,mList)
-                        binding.onewayvehiclelist.layoutManager=LinearLayoutManager(this@MapsActivity1)
-                        binding.onewayvehiclelist.adapter=currentOneWayKmCountAdapter
-                    }
+                       }
+
+                    }
+                    currentOneWayKmCountAdapter = CurrentOneWayKmCountAdapter(this@MapsActivity1,mList)
+                    binding.onewayvehiclelist.layoutManager=LinearLayoutManager(this@MapsActivity1)
+                    binding.onewayvehiclelist.adapter=currentOneWayKmCountAdapter
                 }
             }
         }, object : Response.ErrorListener {
Index: app/src/main/java/com/pearlorganisation/figgo/PaymentPayActivity.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.pearlorganisation.figgo\r\n\r\nimport android.annotation.SuppressLint\r\nimport android.app.ProgressDialog\r\nimport android.content.Intent\r\nimport androidx.appcompat.app.AppCompatActivity\r\nimport android.os.Bundle\r\nimport android.util.Log\r\nimport android.widget.Button\r\nimport android.widget.EditText\r\nimport android.widget.TextView\r\nimport android.widget.Toast\r\nimport com.android.volley.AuthFailureError\r\nimport com.android.volley.Response\r\nimport com.android.volley.VolleyError\r\nimport com.android.volley.toolbox.JsonObjectRequest\r\nimport com.android.volley.toolbox.Volley\r\nimport com.google.android.libraries.places.api.Places\r\nimport com.google.android.libraries.places.api.model.Place\r\nimport com.google.android.libraries.places.widget.Autocomplete\r\nimport com.google.android.libraries.places.widget.AutocompleteActivity\r\nimport com.google.android.libraries.places.widget.model.AutocompleteActivityMode\r\nimport com.pearlorganisation.PrefManager\r\nimport com.razorpay.Checkout\r\nimport com.razorpay.PaymentResultListener\r\nimport org.json.JSONException\r\nimport org.json.JSONObject\r\nimport java.util.*\r\n\r\nclass PaymentPayActivity : AppCompatActivity(), PaymentResultListener {\r\n    var psg_name: EditText? = null\r\n    var psg_contact: EditText? = null\r\n    var pick_address: EditText? = null\r\n    var landmark: EditText? = null\r\n    var pick_location: TextView? = null\r\n    var msg: EditText? = null\r\n    var AUTOCOMPLETE_REQUEST_CODE = -1\r\n    var lat :String ?= \"\"\r\n    var lng :String ?= \"\"\r\n    lateinit var pref: PrefManager\r\n\r\n\r\n    override fun onCreate(savedInstanceState: Bundle?) {\r\n        super.onCreate(savedInstanceState)\r\n        setContentView(R.layout.activity_payment_pay)\r\n\r\n        var pay_now = findViewById<Button>(R.id.pay_now)\r\n\r\n        psg_name = findViewById<EditText>(R.id.psg_name)\r\n        psg_contact = findViewById<EditText>(R.id.psg_contact_no)\r\n        pick_address = findViewById<EditText>(R.id.pick_address)\r\n        landmark = findViewById<EditText>(R.id.landmark)\r\n        pick_location = findViewById<TextView>(R.id.pick_location)\r\n        msg = findViewById<EditText>(R.id.msg)\r\n        pref = PrefManager(this@PaymentPayActivity)\r\n        val apiKey = getString(R.string.api_key)\r\n        if (!Places.isInitialized()) {\r\n            Places.initialize(applicationContext, apiKey)\r\n        }\r\n\r\n        pick_location?.setOnClickListener {\r\n\r\n\r\n            val field = Arrays.asList(Place.Field.ID, Place.Field.ADDRESS, Place.Field.LAT_LNG)\r\n            val intent = Autocomplete.IntentBuilder(AutocompleteActivityMode.FULLSCREEN, field)\r\n                .build(this@PaymentPayActivity)\r\n            startActivityForResult(intent, AUTOCOMPLETE_REQUEST_CODE)\r\n        }\r\n\r\n\r\n\r\n        pay_now.setOnClickListener {\r\n\r\n\r\n\r\n            if (psg_name?.text.toString().equals(\"\")){\r\n                Toast.makeText(this@PaymentPayActivity, \"Please type Passenger Name\", Toast.LENGTH_LONG).show()\r\n\r\n            }else if (psg_contact?.text.toString().equals(\"\")){\r\n                Toast.makeText(this@PaymentPayActivity, \"Please type Passenger Contact\", Toast.LENGTH_LONG).show()\r\n\r\n            }else if (pick_address?.text.toString().equals(\"\")){\r\n                Toast.makeText(this@PaymentPayActivity, \"Please type Pick Up Address\", Toast.LENGTH_LONG).show()\r\n\r\n            }else if (landmark?.text.toString().equals(\"\")){\r\n                Toast.makeText(this@PaymentPayActivity, \"Please type Landmark\", Toast.LENGTH_LONG).show()\r\n\r\n            }else if (lat.equals(\"\")){\r\n                Toast.makeText(this@PaymentPayActivity, \"Please select Pick Up Location\", Toast.LENGTH_LONG).show()\r\n\r\n            }else {\r\n                getPayNow();\r\n            }\r\n\r\n        }\r\n\r\n    }\r\n\r\n    private fun getPayNow() {\r\n        val progressDialog = ProgressDialog(this@PaymentPayActivity)\r\n        progressDialog.show()\r\n        val URL =\"https://test.pearl-developer.com/figo/api/ride/enter-passenger-details\"\r\n        val queue = Volley.newRequestQueue(this@PaymentPayActivity)\r\n        val json = JSONObject()\r\n        json.put(\"name\", psg_name?.text.toString())\r\n        json.put(\"contact\", psg_contact?.text.toString())\r\n        json.put(\"lat\", lat)\r\n        json.put(\"lng\", lng)\r\n        json.put(\"pickup_address\", pick_address?.text.toString())\r\n        json.put(\"landmark\", landmark?.text.toString())\r\n        json.put(\"ride_id\", pref.getride_id())\r\n        if (msg?.text.toString().equals(\"\")){\r\n            msg?.text = null\r\n        }\r\n        json.put(\"additional_message \", msg?.text.toString())\r\n\r\n\r\n\r\n\r\n        val jsonOblect: JsonObjectRequest =\r\n            object : JsonObjectRequest(Method.POST, URL, json, object :\r\n                Response.Listener<JSONObject?>               {\r\n                @SuppressLint(\"SuspiciousIndentation\")\r\n                override fun onResponse(response: JSONObject?) {\r\n\r\n                    Log.d(\"SendData\", \"response===\" + response)\r\n                    if (response != null) {\r\n\r\n                        progressDialog.hide()\r\n                        val amt = \"1\"\r\n                        val amount = Math.round(amt.toFloat() * 100).toInt()\r\n                        val checkout = Checkout()\r\n                        checkout.setKeyID(\"rzp_test_capDM1KlnUhj5f\")\r\n                        checkout.setImage(R.drawable.appicon)\r\n                        val obj = JSONObject()\r\n                        try {\r\n                            obj.put(\"name\", \"Figgo\")\r\n                            obj.put(\"description\", \"Payment\")\r\n                            obj.put(\"theme.color\", \"\")\r\n                            obj.put(\"currency\", \"INR\")\r\n                            obj.put(\"amount\", amount)\r\n                            val preFill = JSONObject()\r\n                            preFill.put(\"email\", \"a@gmail.com\")\r\n                            preFill.put(\"contact\", \"91\" + \"1234567098\")\r\n                            obj.put(\"prefill\", preFill)\r\n                            checkout.open(this@PaymentPayActivity, obj)\r\n                        } catch (e: JSONException) {\r\n                            e.printStackTrace()\r\n                        }\r\n                        //  view?.let { Navigation.findNavController(it).navigate(R.id.action_payFragment_to_paymentWayFragment) }\r\n\r\n\r\n\r\n                    }\r\n                    // Get your json response and convert it to whatever you want.\r\n                }\r\n            }, object : Response.ErrorListener {\r\n                override fun onErrorResponse(error: VolleyError?) {\r\n                    Log.d(\"SendData\", \"error===\" + error)\r\n                    Toast.makeText(this@PaymentPayActivity, \"Something went wrong!\", Toast.LENGTH_LONG).show()\r\n\r\n                }\r\n            }) {\r\n                @SuppressLint(\"SuspiciousIndentation\")\r\n                @Throws(AuthFailureError::class)\r\n                override fun getHeaders(): Map<String, String> {\r\n                    val headers: MutableMap<String, String> = HashMap()\r\n                    headers.put(\"Content-Type\", \"application/json; charset=UTF-8\");\r\n                    headers.put(\"Authorization\", \"Bearer \" + pref.getToken());\r\n                    headers.put(\"Accept\", \"application/vnd.api+json\");\r\n                    return headers\r\n                }\r\n            }\r\n\r\n        queue.add(jsonOblect)\r\n\r\n    }\r\n\r\n\r\n    override fun onActivityResult(requestCode: Int, resultCode: Int, data: Intent?) {\r\n        super.onActivityResult(requestCode, resultCode, data)\r\n        if (requestCode == AUTOCOMPLETE_REQUEST_CODE) {\r\n            if (resultCode == AppCompatActivity.RESULT_OK) {\r\n                val place = Autocomplete.getPlaceFromIntent(data!!)\r\n\r\n                pick_location!!.setText(place.address)\r\n                lat = place.latLng.latitude.toString()\r\n                lng = place.latLng.longitude.toString()\r\n\r\n            } else if (resultCode == AutocompleteActivity.RESULT_ERROR) {\r\n                val status = Autocomplete.getStatusFromIntent(\r\n                    data!!\r\n                )\r\n            } else if (resultCode == AppCompatActivity.RESULT_CANCELED) {\r\n            }\r\n        }\r\n    }\r\n    override fun onPaymentSuccess(s: String?) {\r\n        Toast.makeText(this@PaymentPayActivity, \"Payment is successfull : \" + s, Toast.LENGTH_SHORT).show()\r\n    }\r\n    override fun onPaymentError(p0: Int, s: String?) {\r\n        Toast.makeText(this@PaymentPayActivity, \"Payment Failed due to error : \" + s, Toast.LENGTH_SHORT).show()\r\n    }\r\n\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/com/pearlorganisation/figgo/PaymentPayActivity.kt b/app/src/main/java/com/pearlorganisation/figgo/PaymentPayActivity.kt
--- a/app/src/main/java/com/pearlorganisation/figgo/PaymentPayActivity.kt	(revision fab82203368abdd7a031ee01b2b3cd09d54de347)
+++ b/app/src/main/java/com/pearlorganisation/figgo/PaymentPayActivity.kt	(date 1673933999877)
@@ -108,7 +108,7 @@
         json.put("lng", lng)
         json.put("pickup_address", pick_address?.text.toString())
         json.put("landmark", landmark?.text.toString())
-        json.put("ride_id", pref.getride_id())
+        json.put("ride_id", pref.getRideId())
         if (msg?.text.toString().equals("")){
             msg?.text = null
         }
Index: app/src/main/java/com/pearlorganisation/figgo/UI/CabDetailsActivity.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.pearlorganisation.figgo.UI\r\n\r\nimport android.annotation.SuppressLint\r\nimport android.app.ProgressDialog\r\nimport android.content.ContentValues.TAG\r\nimport android.graphics.Color\r\nimport android.os.Bundle\r\nimport android.os.Handler\r\nimport android.util.Log\r\nimport android.widget.Toast\r\nimport androidx.appcompat.app.AppCompatActivity\r\nimport androidx.navigation.NavController\r\nimport androidx.navigation.fragment.NavHostFragment\r\nimport com.android.volley.AuthFailureError\r\nimport com.android.volley.Response\r\nimport com.android.volley.VolleyError\r\nimport com.android.volley.toolbox.JsonObjectRequest\r\nimport com.android.volley.toolbox.Volley\r\nimport com.pearlorganisation.PrefManager\r\nimport com.pearlorganisation.figgo.BaseClass\r\nimport com.pearlorganisation.figgo.R\r\nimport com.pearlorganisation.figgo.UI.Fragments.Shared_Cab_Fragment.ThankyouScreenFragment\r\nimport com.razorpay.PaymentResultListener\r\nimport org.json.JSONObject\r\nimport java.util.*\r\n\r\n\r\nclass CabDetailsActivity : BaseClass(), PaymentResultListener {\r\n    lateinit var nav_controller: NavController\r\n    var transaction_id :String ?= \"\"\r\n    var thankyouScreenFragment = ThankyouScreenFragment()\r\n    lateinit var pref: PrefManager\r\n    override fun setLayoutXml() {\r\n        TODO(\"Not yet implemented\")\r\n    }\r\n\r\n    override fun initializeViews() {\r\n        TODO(\"Not yet implemented\")\r\n    }\r\n\r\n    override fun initializeClickListners() {\r\n        TODO(\"Not yet implemented\")\r\n    }\r\n\r\n    override fun initializeInputs() {\r\n        TODO(\"Not yet implemented\")\r\n    }\r\n\r\n    override fun initializeLabels() {\r\n        TODO(\"Not yet implemented\")\r\n    }\r\n\r\n    override fun onCreate(savedInstanceState: Bundle?) {\r\n        super.onCreate(savedInstanceState)\r\n        setContentView(R.layout.activity_cab_details)\r\n        var window=window\r\n        window.setStatusBarColor(Color.parseColor(\"#000F3B\"))\r\n\r\n        var nav_host_fragment=supportFragmentManager.findFragmentById(R.id.nav_controller) as NavHostFragment\r\n        nav_controller=nav_host_fragment.navController\r\n        pref = PrefManager(this@CabDetailsActivity)\r\n//        var book_now=findViewById<TextView>(R.id.book_now)\r\n//        book_now.setOnClickListener {\r\n//            Toast.makeText(this,\"your cab is book successfully\",Toast.LENGTH_LONG)\r\n//\r\n//        }\r\n    }\r\n\r\n    override fun onPaymentSuccess(s: String?) {\r\n        Toast.makeText(this@CabDetailsActivity, \"payment successful\", Toast.LENGTH_SHORT).show()\r\n\r\n              try {\r\n                 transaction_id = s\r\n\r\n                  getOtp()\r\n              } catch (e: Exception) {\r\n                  Log.e(TAG, \"Exception in onPaymentSuccess\", e)\r\n              }\r\n\r\n        }\r\n\r\n    override fun onPaymentError(i: Int, s: String?) {\r\n        Toast.makeText(this@CabDetailsActivity, \"Payment failed$i\", Toast.LENGTH_SHORT).show()\r\n\r\n    }\r\n    private fun getOtp() {\r\n        val progressDialog = ProgressDialog(this@CabDetailsActivity)\r\n        progressDialog.show()\r\n        val URL =\"https://test.pearl-developer.com/figo/api/ride/update-city-ride-payment-status\"\r\n        val queue = Volley.newRequestQueue(this@CabDetailsActivity)\r\n        val json = JSONObject()\r\n        json.put(\"transaction_id\", transaction_id.toString())\r\n        json.put(\"payment_type\", \"card\")\r\n        json.put(\"ride_id\", pref.getride_id())\r\n\r\n        val jsonOblect: JsonObjectRequest =\r\n            object : JsonObjectRequest(Method.POST, URL, json, object :\r\n                Response.Listener<JSONObject?>               {\r\n                @SuppressLint(\"SuspiciousIndentation\")\r\n                override fun onResponse(response: JSONObject?) {\r\n\r\n                    Log.d(\"SendData\", \"response===\" + response)\r\n                    if (response != null) {\r\n                        progressDialog.hide()\r\n                        val booking_no = response.getJSONObject(\"ride\").getString(\"booking_id\")\r\n                        val otp = response.getInt(\"otp\")\r\n\r\n                        pref.setOtp(otp.toString())\r\n                        pref.setBookingNo(booking_no)\r\n                       supportFragmentManager.beginTransaction().apply {\r\n                            replace(R.id.nav_controller, thankyouScreenFragment)\r\n                            commit()\r\n                        }\r\n                    }\r\n\r\n                }\r\n            }, object : Response.ErrorListener {\r\n                override fun onErrorResponse(error: VolleyError?) {\r\n                    Log.d(\"SendData\", \"error===\" + error)\r\n                    Toast.makeText(this@CabDetailsActivity, \"Something went wrong!\", Toast.LENGTH_LONG).show()\r\n\r\n                }\r\n            }) {\r\n\r\n                @Throws(AuthFailureError::class)\r\n                override fun getHeaders(): Map<String, String> {\r\n                    val headers: MutableMap<String, String> = HashMap()\r\n                    headers.put(\"Content-Type\", \"application/json; charset=UTF-8\");\r\n                    headers.put(\"Authorization\", \"Bearer \" + pref.getToken());\r\n                    headers.put(\"Accept\", \"application/vnd.api+json\");\r\n                    return headers\r\n                }\r\n            }\r\n\r\n        queue.add(jsonOblect)\r\n\r\n    }\r\n\r\n\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/com/pearlorganisation/figgo/UI/CabDetailsActivity.kt b/app/src/main/java/com/pearlorganisation/figgo/UI/CabDetailsActivity.kt
--- a/app/src/main/java/com/pearlorganisation/figgo/UI/CabDetailsActivity.kt	(revision fab82203368abdd7a031ee01b2b3cd09d54de347)
+++ b/app/src/main/java/com/pearlorganisation/figgo/UI/CabDetailsActivity.kt	(date 1673933999892)
@@ -91,7 +91,7 @@
         val json = JSONObject()
         json.put("transaction_id", transaction_id.toString())
         json.put("payment_type", "card")
-        json.put("ride_id", pref.getride_id())
+        json.put("ride_id", pref.getRideId())
 
         val jsonOblect: JsonObjectRequest =
             object : JsonObjectRequest(Method.POST, URL, json, object :
Index: app/src/main/java/com/pearlorganisation/figgo/BaseClass.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.pearlorganisation.figgo\r\n\r\nimport android.Manifest.permission.READ_EXTERNAL_STORAGE\r\nimport android.annotation.SuppressLint\r\nimport android.app.Activity\r\nimport android.content.BroadcastReceiver\r\nimport android.content.Context\r\nimport android.content.Intent\r\nimport android.content.IntentFilter\r\nimport android.content.pm.PackageManager\r\nimport android.graphics.Bitmap\r\nimport android.net.ConnectivityManager\r\nimport android.net.Uri\r\nimport android.os.Build\r\nimport android.util.Base64\r\nimport android.util.Log\r\nimport android.view.View\r\nimport android.view.Window\r\nimport android.view.WindowManager\r\nimport android.view.inputmethod.InputMethodManager\r\nimport android.webkit.MimeTypeMap\r\nimport android.widget.EditText\r\nimport android.widget.ImageView\r\nimport android.widget.LinearLayout\r\nimport android.widget.TextView\r\nimport androidx.annotation.RequiresApi\r\nimport androidx.appcompat.app.AppCompatActivity\r\nimport androidx.core.app.ActivityCompat\r\nimport androidx.core.content.ContextCompat\r\nimport com.pearlorganisation.figgo.CurrentMap.EmergencyMapsActivity\r\nimport com.pearlorganisation.figgo.CurrentMap.MapsActivity1\r\nimport java.io.ByteArrayOutputStream\r\nimport java.util.*\r\nimport java.util.jar.Manifest\r\nimport java.util.regex.Pattern\r\nimport java.lang.Class as Class1\r\n\r\nabstract class BaseClass  : AppCompatActivity(){\r\n\r\n    protected var versionNew: String? = null\r\n    protected var versionName: String? = null\r\n    // var mIsUpdateAppTask: IsAppUpdated? = null\r\n    protected var baseApcContext: Context? = null\r\n    protected var activityIn: AppCompatActivity? = null\r\n    protected var LogTag: String? = null\r\n    protected var CAId: String? = null\r\n    protected var LogString: String? = null\r\n    var STORAGE_PERMISSION_CODE = 1\r\n    var session: Session? = null\r\n   lateinit var shareimg:ImageView\r\n\r\n//    var backtxt = findViewById<TextView>(R.id.backtxt)*/\r\n  //  var classname = \"Login\"\r\n    fun setBaseApcContextParent(cnt: Context?, ain: AppCompatActivity?, lt: String?, classname: String?) {\r\n        var classname = classname\r\n        baseApcContext = cnt\r\n        activityIn = ain\r\n        LogTag = lt\r\n        classname = classname\r\n        printLogs(lt, \"setBaseApcContextParent\", \"weAreIn\")\r\n    }\r\n\r\n    protected fun internetChangeBroadCast() {\r\n        printLogs(\"Logs\", \"initializeViews\", \"init\")\r\n        registerBroadcast()\r\n    }\r\n\r\n    @get:SuppressLint(\"ObsoleteSdkInt\")\r\n    val cTheme: Unit\r\n        get() {\r\n            if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.LOLLIPOP) {\r\n                val window: Window = getWindow()\r\n                window.addFlags(WindowManager.LayoutParams.FLAG_DRAWS_SYSTEM_BAR_BACKGROUNDS)\r\n                window.statusBarColor = getResources().getColor(R.color.colorRed)\r\n            }\r\n        }\r\n/*\r\n    @SuppressLint(\"ObsoleteSdkInt\")\r\n    fun getgreenTheme() {\r\n        if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.LOLLIPOP) {\r\n            val window: Window = getWindow()\r\n            window.addFlags(WindowManager.LayoutParams.FLAG_DRAWS_SYSTEM_BAR_BACKGROUNDS)\r\n            window.statusBarColor = getResources().getColor(R.color.green)\r\n        }\r\n    }*/\r\n\r\n    @SuppressLint(\"ObsoleteSdkInt\")\r\n    fun getwhiteTheme() {\r\n        if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.LOLLIPOP) {\r\n            val window: Window = getWindow()\r\n            window.addFlags(WindowManager.LayoutParams.FLAG_DRAWS_SYSTEM_BAR_BACKGROUNDS)\r\n            window.statusBarColor = getResources().getColor(R.color.white)\r\n        }\r\n    }\r\n\r\n    fun isNetworkConnected(context: Context): Boolean {\r\n        val cm: ConnectivityManager =\r\n            context.getSystemService(Context.CONNECTIVITY_SERVICE) as ConnectivityManager\r\n        return cm.getActiveNetworkInfo() != null\r\n    }\r\n\r\n    fun printLogs(tag: String?, funcs: String, msg: String) {\r\n        Log.i(\"OSG-\" + tag + \"__\" + funcs, msg)\r\n        LogString =\r\n            LogString + \"TAG - \" + tag + \"<br/> FUNCTION - \" + funcs + \"<br/> DATA - \" + msg + \"<br/><br/><br/><br/>\"\r\n    }\r\n\r\n    var IChangeReceiver: BroadcastReceiver = object : BroadcastReceiver() {\r\n        @RequiresApi(api = Build.VERSION_CODES.M)\r\n        override fun onReceive(pContext: Context, pIntent: Intent) {\r\n            val cm: ConnectivityManager =\r\n                pContext.getSystemService(Context.CONNECTIVITY_SERVICE) as ConnectivityManager\r\n            val no_connection: View? = findViewById<View>(R.id.no_connection)\r\n            // TextView try_again = findViewById(R.id.try_again);\r\n            if (cm.getActiveNetwork() != null) {\r\n                no_connection?.visibility = View.GONE\r\n                printLogs(LogTag, \"BroadcastReceiver\", \"func1$this\")\r\n            } else {\r\n                no_connection?.visibility = View.VISIBLE\r\n            }\r\n        }\r\n    }\r\n\r\n    fun registerBroadcast() {\r\n        try {\r\n            printLogs(LogTag, \"registerBroadcast\", \"init\")\r\n            val filter = IntentFilter(\"android.net.conn.CONNECTIVITY_CHANGE\")\r\n            registerReceiver(IChangeReceiver, filter)\r\n            isInternetReceiver = true\r\n            printLogs(LogTag, \"registerBroadcast\", \"exit\")\r\n        } catch (e: Exception) {\r\n            printLogs(LogTag, \"registerBroadcast\", \"Exception \" + e.message)\r\n        }\r\n    }\r\n\r\n    fun unregisterBroadcast() {\r\n        printLogs(LogTag, \"unregisterBroadcast\", \"init\")\r\n        try {\r\n            if (isInternetReceiver) {\r\n                printLogs(LogTag, \"unregisterBroadcast\", \"isInternetReceiver\")\r\n                isInternetReceiver = false\r\n                unregisterReceiver(IChangeReceiver)\r\n            }\r\n        } catch (e: Exception) {\r\n            printLogs(LogTag, \"unregisterBroadcast\", \"Exception \" + e.message)\r\n        }\r\n    }\r\n\r\n\r\n    fun shareimg(){\r\n        var  shareimg = findViewById<ImageView>(R.id.shareimg)\r\n        shareimg.setOnClickListener {\r\n\r\n            var intent= Intent()\r\n            intent.action= Intent.ACTION_SEND\r\n            intent.putExtra(Intent.EXTRA_TEXT,\"I am Inviting you to join  Figgo App for better experience to book cabs\");\r\n            intent.setType(\"text/plain\");\r\n            startActivity(Intent.createChooser(intent, \"Invite Friends\"));\r\n        }\r\n\r\n\r\n    }\r\n\r\n    fun onBackPress(){\r\n        var ll_back = findViewById<LinearLayout>(R.id.ll_back)\r\n        ll_back.setOnClickListener {\r\n      /*      val intent = Intent(to, from::class.java)\r\n            startActivity(intent)*/\r\n            finish()\r\n        }\r\n    }\r\n\r\n\r\n    fun backimg(){\r\n\r\n\r\n\r\n    }\r\n\r\n    fun backtxt(){\r\n\r\n    }\r\n\r\n    /* protected fun showProgress(show: Boolean) {\r\n         val ll_main: View = findViewById<View>(R.id.ll_main)\r\n         val loader: View = findViewById<View>(R.id.loader)\r\n         if (show) {\r\n             ll_main.visibility = View.GONE\r\n             loader.visibility = View.VISIBLE\r\n         } else {\r\n             ll_main.visibility = View.VISIBLE\r\n             loader.visibility = View.GONE\r\n         }\r\n     }*/\r\n\r\n    /*fun syncUpdates(baseApcContext: Context?, activityIn: AppCompatActivity?) {\r\n        var versionCode = 1\r\n        try {\r\n            val packageInfo: PackageInfo = getPackageManager().getPackageInfo(getPackageName(), 0)\r\n            versionName = packageInfo.versionName\r\n            versionCode = packageInfo.versionCode\r\n        } catch (e: PackageManager.NameNotFoundException) {\r\n            e.printStackTrace()\r\n        }\r\n        versionNew = versionCode.toString()\r\n        //        versionNew = versionName;\r\n        printLogs(\r\n            LogTag,\r\n            \"syncUpdates\",\r\n            \"versionName $versionName VersionCode $versionCode NewVersion $versionNew\"\r\n        )\r\n        mIsUpdateAppTask = IsAppUpdated(versionNew, baseApcContext)\r\n        mIsUpdateAppTask.execute(null as Void?)\r\n    }*/\r\n\r\n    fun verifyVersion() {\r\n        /* syncUpdates(baseApcContext, activityIn);\r\n        printLogs(LogTag, \"verifyVersion\", \"init\");\r\n        session = new Session(baseApcContext);\r\n        Boolean isUpdate = session.getIsUpdateRequired();\r\n        printLogs(LogTag, \"verifyVersion\", \"isUpdate \" + isUpdate);\r\n        if (isUpdate) {\r\n            Intent intent = new Intent(baseApcContext, AppUpdateA.class);\r\n            startActivity(intent);\r\n            finish();\r\n        }*/\r\n    }\r\n\r\n    fun openFileExplorer() {\r\n        val intent = Intent()\r\n        intent.setType(\"image/*\")\r\n        intent.setAction(Intent.ACTION_GET_CONTENT)\r\n        startActivityForResult(\r\n            Intent.createChooser(\r\n                intent,\r\n                \"Select Picture\"\r\n            ), STORAGE_PERMISSION_CODE\r\n        )\r\n    }\r\n\r\n    protected fun setCustomError(msg: String?, mEditView: EditText) {\r\n        mEditView.setError(msg, null)\r\n        mEditView.setBackgroundResource(R.drawable.input_error_profile)\r\n        mEditView.requestFocus()\r\n    }\r\n\r\n    protected fun setCustomErrorDisabled(mEditView: EditText) {\r\n        mEditView.setError(null)\r\n        mEditView.setBackgroundResource(R.drawable.input_boder_profile)\r\n    }\r\n\r\n    fun validateName(inputUser: EditText): Boolean {\r\n        val name = inputUser.text.toString()\r\n        System.out.println(\"NAMEE===\"+name)\r\n        setCustomError(null, inputUser)\r\n        return if (name.isEmpty()) {\r\n            val sMessage = \"Please enter name..!!\"\r\n            setCustomError(sMessage, inputUser)\r\n            false\r\n        } else if (!isValidName(name)) {\r\n            val sMessage = \"Name must be at least 3 character and at most 50 character..!!\"\r\n            setCustomError(sMessage, inputUser)\r\n            false\r\n        } else {\r\n            setCustomErrorDisabled(inputUser)\r\n            true\r\n        }\r\n\r\n    }\r\n\r\n    fun validateAddress1(inputUser: EditText): Boolean {\r\n        val address: String = inputUser.getText().toString().trim { it <= ' ' }\r\n        setCustomError(null, inputUser)\r\n        return if (address.isEmpty()) {\r\n            val sMessage = \"Please enter Address..!!\"\r\n            setCustomError(sMessage, inputUser)\r\n            false\r\n        } else if (!isValidAddress10(address)) {\r\n            val sMessage =\r\n                \"Address must be at least 10 character and should have House no / Flat no / Road no.\"\r\n            setCustomError(sMessage, inputUser)\r\n            false\r\n        } else {\r\n            setCustomErrorDisabled(inputUser)\r\n            true\r\n        }\r\n    }\r\n\r\n    fun validateAddress(inputUser: EditText): Boolean {\r\n        val address: String = inputUser.getText().toString().trim { it <= ' ' }\r\n        setCustomError(null, inputUser)\r\n        return if (address.isEmpty()) {\r\n            val sMessage = \"Please enter Address..!!\"\r\n            setCustomError(sMessage, inputUser)\r\n            false\r\n        } else if (!isValidAddress(address)) {\r\n            val sMessage = \"Address must be at least 3 character\"\r\n            setCustomError(sMessage, inputUser)\r\n            false\r\n        } else {\r\n            setCustomErrorDisabled(inputUser)\r\n            true\r\n        }\r\n    }\r\n\r\n    fun validateEmail(email: EditText): Boolean {\r\n        val email_id: String = email.getText().toString().trim { it <= ' ' }\r\n        setCustomError(null, email)\r\n        return if (email_id.isEmpty()) {\r\n            val sMessage = \"Please enter email..!!\"\r\n            setCustomError(sMessage, email)\r\n            false\r\n        } else {\r\n            setCustomErrorDisabled(email)\r\n            true\r\n        }\r\n    }\r\n\r\n    fun validateDob(dob: EditText): Boolean {\r\n        val dob_id: String = dob.getText().toString().trim { it <= ' ' }\r\n        setCustomError(null, dob)\r\n        return if (dob_id.isEmpty()) {\r\n            val sMessage = \"Please enter valid dob..!!\"\r\n            setCustomError(sMessage, dob)\r\n            false\r\n        } else {\r\n            setCustomErrorDisabled(dob)\r\n            true\r\n        }\r\n    }\r\n    fun validateState(state: EditText): Boolean {\r\n        val dob_id: String = state.getText().toString().trim { it <= ' ' }\r\n        setCustomError(null, state)\r\n        return if (dob_id.isEmpty()) {\r\n            val sMessage = \"state is must required ..!!\"\r\n            setCustomError(sMessage, state)\r\n            false\r\n        } else {\r\n            setCustomErrorDisabled(state)\r\n            true\r\n        }\r\n    }\r\n    fun validateCity(city: EditText): Boolean {\r\n        val dob_id: String = city.getText().toString().trim { it <= ' ' }\r\n        setCustomError(null, city)\r\n        return if (dob_id.isEmpty()) {\r\n            val sMessage = \"city is must required ..!!\"\r\n            setCustomError(sMessage, city)\r\n            false\r\n        } else {\r\n            setCustomErrorDisabled(city)\r\n            true\r\n        }\r\n    }\r\n    fun validateWorkState(workState: EditText): Boolean {\r\n        val dob_id: String = workState.getText().toString().trim { it <= ' ' }\r\n        setCustomError(null, workState)\r\n        return if (dob_id.isEmpty()) {\r\n            val sMessage = \"first work state is must required ..!!\"\r\n            setCustomError(sMessage, workState)\r\n            false\r\n        } else {\r\n            setCustomErrorDisabled(workState)\r\n            true\r\n        }\r\n    }\r\n\r\n    fun validateNumber(number: EditText): Boolean {\r\n        val num: String = number.getText().toString().trim { it <= ' ' }\r\n        setCustomError(null, number)\r\n        return if (num.isEmpty()) {\r\n            val sMessage = \"Please enter number..!!\"\r\n            setCustomError(sMessage, number)\r\n            false\r\n        } else if (!isphoneNumberValid(num)) {\r\n            val sMessage = \"Number must be 10 character and not be alphabet..!!\"\r\n            setCustomError(sMessage, number)\r\n            false\r\n        } else {\r\n            setCustomErrorDisabled(number)\r\n            true\r\n        }\r\n    }\r\n    fun validatedriverDLNo(driverDLNo: EditText): Boolean {\r\n        val num: String = driverDLNo.getText().toString().trim { it <= ' ' }\r\n        setCustomError(null, driverDLNo)\r\n        return if (num.isEmpty()) {\r\n            val sMessage = \"Please enter driver license no..!!\"\r\n            setCustomError(sMessage, driverDLNo)\r\n            false\r\n        } else if (!isValidNumber(num)) {\r\n            val sMessage = \"Number must be 15 letter or digits..!!\"\r\n            setCustomError(sMessage, driverDLNo)\r\n            false\r\n        } else {\r\n            setCustomErrorDisabled(driverDLNo)\r\n            true\r\n        }\r\n    }\r\n    fun validatedriverRegistrationNo(registrationNo: EditText): Boolean {\r\n        val num: String = registrationNo.getText().toString().trim { it <= ' ' }\r\n        setCustomError(null,registrationNo)\r\n        return if (num.isEmpty()) {\r\n            val sMessage = \"Please enter driver registeration no..!!\"\r\n            setCustomError(sMessage, registrationNo)\r\n            false\r\n        } else if (!isValidNumber(num)) {\r\n            val sMessage = \"Number must be 15 letter or digits..!!\"\r\n            setCustomError(sMessage, registrationNo)\r\n            false\r\n        } else {\r\n            setCustomErrorDisabled(registrationNo)\r\n            true\r\n        }\r\n    }\r\n    fun validateDriverInsuranceDate(insurance: EditText): Boolean {\r\n        val dob_id: String = insurance.getText().toString().trim { it <= ' ' }\r\n        setCustomError(null, insurance)\r\n        return if (dob_id.isEmpty()) {\r\n            val sMessage = \"please enter valid date ..!!\"\r\n            setCustomError(sMessage, insurance)\r\n            false\r\n        } else {\r\n            setCustomErrorDisabled(insurance)\r\n            true\r\n        }\r\n    }\r\n\r\n    fun getExtension(uri: Uri?): String? {\r\n\r\n        val mimeType: String? = uri?.let { baseApcContext?.getContentResolver()!!.getType(it).toString() }\r\n        return MimeTypeMap.getSingleton().getExtensionFromMimeType(mimeType)\r\n    }\r\n\r\n    fun requestPermission() {\r\n        if (ContextCompat.checkSelfPermission(this,android.Manifest.permission.READ_EXTERNAL_STORAGE) == PackageManager.PERMISSION_GRANTED\r\n        ) {\r\n            openFileExplorer()\r\n            return\r\n        }\r\n        ActivityCompat.shouldShowRequestPermissionRationale(this, android.Manifest.permission.READ_EXTERNAL_STORAGE)\r\n\r\n        ActivityCompat.requestPermissions(this, arrayOf(android.Manifest.permission.READ_EXTERNAL_STORAGE),\r\n            STORAGE_PERMISSION_CODE\r\n        )\r\n    }\r\n\r\n    fun BitMapToString(bitmap: Bitmap): String {\r\n        val baos = ByteArrayOutputStream()\r\n        bitmap.compress(Bitmap.CompressFormat.JPEG, 60, baos)\r\n        val b = baos.toByteArray()\r\n        Base64.encodeToString(b, Base64.DEFAULT)\r\n        return Base64.encodeToString(b, Base64.DEFAULT)\r\n    }\r\n\r\n    @SuppressLint(\"ServiceCast\")\r\n    fun hideKeybaord(v: View) {\r\n        val inputMethodManager =\r\n            getSystemService(Context.INPUT_METHOD_SERVICE) as InputMethodManager\r\n        inputMethodManager.hideSoftInputFromWindow(v.applicationWindowToken, 0)\r\n    }\r\n\r\n    protected override fun onPause() {\r\n        super.onPause()\r\n    }\r\n\r\n    protected override fun onResume() {\r\n        super.onResume()\r\n    }\r\n\r\n    override fun onDestroy() {\r\n        super.onDestroy()\r\n    }\r\n\r\n    protected abstract fun setLayoutXml()\r\n    protected abstract fun initializeViews()\r\n    protected abstract fun initializeClickListners()\r\n    protected abstract fun initializeInputs()\r\n    protected abstract fun initializeLabels()\r\n\r\n    companion object {\r\n        var isInternetReceiver = false\r\n        fun isValidNumber(number: String): Boolean {\r\n            var result: Boolean\r\n            result = true\r\n            if (number.length < 12) {\r\n                result = false\r\n            }\r\n            if (number.length > 12) {\r\n                result = false\r\n            }\r\n\r\n            return result\r\n        }\r\n        fun isValidMobile(phone: String): Boolean {\r\n            return if (!Pattern.matches(\"[a-zA-Z]+\", phone)) {\r\n                phone.length > 6 && phone.length <= 13\r\n            }\r\n            else false\r\n        }\r\n        fun isphoneNumberValid(num:String):Boolean{\r\n            var result:Boolean\r\n            result=true\r\n            if (!Pattern.matches(\"[a-zA-Z]+\", num)){\r\n                result=false\r\n            }\r\n            if (num.length > 6){\r\n                result=false\r\n            }\r\n            if (num.length <= 13){\r\n                result=false\r\n            }\r\n            return result\r\n        }\r\n\r\n        fun isValidName(name: String): Boolean {\r\n            var result: Boolean\r\n            result = true\r\n            if (name.length < 3) {\r\n                result = false\r\n            }\r\n            if (name.length > 50) {\r\n                result = false\r\n            }\r\n            return result\r\n        }\r\n\r\n        fun isValidAddress10(name: String): Boolean {\r\n            var result: Boolean\r\n            result = true\r\n            if (name.length < 10) {\r\n                result = false\r\n            }\r\n            return result\r\n        }\r\n\r\n        fun isValidAddress(name: String): Boolean {\r\n            var result: Boolean\r\n            result = true\r\n            if (name.length < 3) {\r\n                result = false\r\n            }\r\n            return result\r\n        }\r\n    }\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/com/pearlorganisation/figgo/BaseClass.kt b/app/src/main/java/com/pearlorganisation/figgo/BaseClass.kt
--- a/app/src/main/java/com/pearlorganisation/figgo/BaseClass.kt	(revision fab82203368abdd7a031ee01b2b3cd09d54de347)
+++ b/app/src/main/java/com/pearlorganisation/figgo/BaseClass.kt	(date 1673933979567)
@@ -181,6 +181,9 @@
 
     }
 
+
+
+
     /* protected fun showProgress(show: Boolean) {
          val ll_main: View = findViewById<View>(R.id.ll_main)
          val loader: View = findViewById<View>(R.id.loader)
Index: app/src/main/java/com/pearlorganisation/figgo/UI/Fragments/CabBookFragment.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.pearlorganisation.figgo.UI.Fragments\r\n\r\nimport android.annotation.SuppressLint\r\nimport android.app.ProgressDialog\r\nimport android.os.Bundle\r\nimport android.util.Log\r\nimport androidx.fragment.app.Fragment\r\nimport android.view.LayoutInflater\r\nimport android.view.View\r\nimport android.view.ViewGroup\r\nimport android.webkit.WebView\r\nimport android.widget.ImageView\r\nimport android.widget.TextView\r\nimport android.widget.Toast\r\nimport androidx.navigation.Navigation\r\nimport androidx.test.core.app.ApplicationProvider\r\nimport com.android.volley.AuthFailureError\r\nimport com.android.volley.Response\r\nimport com.android.volley.VolleyError\r\nimport com.android.volley.toolbox.JsonObjectRequest\r\nimport com.android.volley.toolbox.Volley\r\nimport com.payu.base.models.ErrorResponse\r\nimport com.payu.base.models.PayUPaymentParams\r\nimport com.payu.checkoutpro.PayUCheckoutPro\r\nimport com.payu.checkoutpro.utils.PayUCheckoutProConstants\r\nimport com.payu.ui.model.listeners.PayUCheckoutProListener\r\nimport com.payu.ui.model.listeners.PayUHashGenerationListener\r\nimport com.pearlorganisation.PrefManager\r\nimport com.pearlorganisation.figgo.R\r\nimport com.pearlorganisation.figgo.UI.Fragments.Shared_Cab_Fragment.ThankyouScreenFragment\r\nimport com.razorpay.Checkout\r\nimport com.razorpay.PaymentResultListener\r\nimport org.json.JSONException\r\nimport org.json.JSONObject\r\nimport java.text.SimpleDateFormat\r\nimport java.util.*\r\n\r\n\r\nclass CabBookFragment : Fragment() {\r\n    lateinit var pref: PrefManager\r\n\r\n    var created_at: TextView? = null\r\n    var updated_at: TextView? = null\r\n    var dis1: TextView? = null\r\n    var dis2: TextView? = null\r\n    var to_loc: TextView? = null\r\n    var from_loc: TextView? = null\r\n    var fare: TextView? = null\r\n    var image: ImageView? = null\r\n    var transaction_id :String ?= \"\"\r\n    var thankyouScreenFragment = ThankyouScreenFragment()\r\n    override fun onCreate(savedInstanceState: Bundle?) {\r\n        super.onCreate(savedInstanceState)\r\n\r\n    }\r\n\r\n    override fun onCreateView(\r\n        inflater: LayoutInflater, container: ViewGroup?,\r\n        savedInstanceState: Bundle?\r\n    ): View? {\r\n        // Inflate the layout for this fragment\r\n        return inflater.inflate(R.layout.fragment_cab_book, container, false)\r\n    }\r\n\r\n    override fun onViewCreated(view: View, savedInstanceState: Bundle?) {\r\n        super.onViewCreated(view, savedInstanceState)\r\n        var book_self=view.findViewById<TextView>(R.id.book_self)\r\n        var book_other=view.findViewById<TextView>(R.id.book_other)\r\n        created_at = view.findViewById<TextView>(R.id.created_at)\r\n        updated_at = view.findViewById<TextView>(R.id.updated_at)\r\n        dis1 = view.findViewById<TextView>(R.id.dis)\r\n        dis2 = view.findViewById<TextView>(R.id.dis2)\r\n        to_loc = view.findViewById<TextView>(R.id.to_loc)\r\n        from_loc = view.findViewById<TextView>(R.id.from_loc)\r\n        fare = view.findViewById<TextView>(R.id.fare)\r\n      //  image = view.findViewById<ImageView>(R.id.image)\r\n\r\n        pref = PrefManager(requireActivity())\r\n\r\n\r\n\r\n\r\n        getCabBookData()\r\n\r\n        book_other.setOnClickListener {\r\n            Navigation.findNavController(view).navigate(R.id.action_cabBookFragment_to_payFragment)\r\n\r\n\r\n           // startActivity(Intent(requireActivity(), PaymentPayActivity::class.java))\r\n\r\n\r\n        }\r\n\r\n        book_self.setOnClickListener {\r\n\r\n            val payUPaymentParams = PayUPaymentParams.Builder()\r\n                .setAmount(\"1.0\")\r\n                .setIsProduction(true)\r\n                .setKey(\"0MQaQP\")\r\n                .setProductInfo(\"Test\")\r\n                .setPhone(\"9999999999\")\r\n                .setTransactionId(System.currentTimeMillis().toString())\r\n                .setFirstName(\"John\")\r\n                .setEmail(\"John@gmail.com\")\r\n                .setSurl(\"https://payu.response.firebaseapp.com/success\")\r\n                .setFurl(\"https://payu.response.firebaseapp.com/failure\")\r\n                //Optional, can contain any additional PG params\r\n                .build()\r\n            PayUCheckoutPro.open(\r\n                requireActivity(), payUPaymentParams,\r\n                object : PayUCheckoutProListener {\r\n\r\n\r\n                    override fun onPaymentSuccess(response: Any) {\r\n                        response as HashMap<*, *>\r\n                        val payUResponse = response[PayUCheckoutProConstants.CP_PAYU_RESPONSE]\r\n                        val merchantResponse = response[PayUCheckoutProConstants.CP_MERCHANT_RESPONSE]\r\n                    }\r\n\r\n\r\n                    override fun onPaymentFailure(response: Any) {\r\n                        response as HashMap<*, *>\r\n                        val payUResponse = response[PayUCheckoutProConstants.CP_PAYU_RESPONSE]\r\n                        val merchantResponse = response[PayUCheckoutProConstants.CP_MERCHANT_RESPONSE]\r\n                    }\r\n\r\n\r\n                    override fun onPaymentCancel(isTxnInitiated:Boolean) {\r\n                    }\r\n\r\n\r\n                    override fun onError(errorResponse: ErrorResponse) {\r\n                        val errorMessage: String\r\n                        if (errorResponse != null && errorResponse.errorMessage != null && errorResponse.errorMessage!!.isNotEmpty())\r\n                            errorMessage = errorResponse.errorMessage!!\r\n                        else {\r\n                            //   errorMessage = resources.getString(R.string.some_error_occurred)\r\n                        }\r\n                    }\r\n\r\n                    override fun setWebViewProperties(webView: WebView?, bank: Any?) {\r\n                        //For setting webview properties, if any. Check Customized Integration section for more details on this\r\n                    }\r\n\r\n                    override fun generateHash(\r\n                        valueMap: HashMap<String, String?>,\r\n                        hashGenerationListener: PayUHashGenerationListener\r\n                    ) {\r\n                        if ( valueMap.containsKey(PayUCheckoutProConstants.CP_HASH_STRING)\r\n                            && valueMap.containsKey(PayUCheckoutProConstants.CP_HASH_STRING) != null\r\n                            && valueMap.containsKey(PayUCheckoutProConstants.CP_HASH_NAME)\r\n                            && valueMap.containsKey(PayUCheckoutProConstants.CP_HASH_NAME) != null) {\r\n\r\n                            val hashData = valueMap[PayUCheckoutProConstants.CP_HASH_STRING]\r\n                            val hashName = valueMap[PayUCheckoutProConstants.CP_HASH_NAME]\r\n\r\n                            //Do not generate hash from local, it needs to be calculated from server side only. Here, hashString contains hash created from your server side.\r\n                            /* val hash: String? = hashString\r\n                             if (!TextUtils.isEmpty(hash)) {\r\n                                 val dataMap: HashMap<String, String?> = HashMap()\r\n                                 dataMap[hashName!!] = hash!!\r\n                                 hashGenerationListener.onHashGenerated(dataMap)\r\n                             }*/\r\n                        }\r\n                    }\r\n                })\r\n\r\n        }\r\n    }\r\n\r\n    private fun getCabBookData() {\r\n        val progressDialog = ProgressDialog(requireActivity())\r\n        progressDialog.show()\r\n        val URL =\"https://test.pearl-developer.com/figo/api/ride/select-city-vehicle-type\"\r\n        val queue = Volley.newRequestQueue(requireContext())\r\n        val json = JSONObject()\r\n        json.put(\"ride_id\", pref.getRideId())\r\n        json.put(\"vehicle_type_id\", pref.getVehicleId())\r\n\r\n\r\n\r\n\r\n        val jsonOblect: JsonObjectRequest =\r\n            object : JsonObjectRequest(Method.POST, URL, json, object :\r\n                Response.Listener<JSONObject?>               {\r\n                @SuppressLint(\"SuspiciousIndentation\")\r\n                override fun onResponse(response: JSONObject?) {\r\n\r\n                    Log.d(\"SendData\", \"response===\" + response)\r\n                    if (response != null) {\r\n\r\n                        progressDialog.hide()\r\n                        val distance = response.getJSONObject(\"data\").getString(\"distance\")\r\n                        val createdAt = response.getJSONObject(\"data\").getJSONObject(\"ride\").getString(\"created_at\")\r\n                        val updatedAt = response.getJSONObject(\"data\").getJSONObject(\"ride\").getString(\"updated_at\")\r\n                        val full_image = response.getJSONObject(\"data\").getJSONObject(\"vehicle\").getString(\"full_image\")\r\n                        val max_price = response.getJSONObject(\"data\").getJSONObject(\"vehicle\").getString(\"max_price\")\r\n                        val min_price = response.getJSONObject(\"data\").getJSONObject(\"vehicle\").getString(\"min_price\")\r\n                        val to_location = response.getJSONObject(\"data\").getJSONObject(\"ride\").getJSONObject(\"to_location\").getString(\"name\")\r\n                        val from_location = response.getJSONObject(\"data\").getJSONObject(\"ride\").getJSONObject(\"from_location\").getString(\"name\")\r\n\r\n\r\n                      //  Picasso.get().load(full_image).into(image)\r\n                        created_at?.setText(createdAt)\r\n                        updated_at?.setText(updatedAt)\r\n                        dis1?.setText(distance)\r\n                        dis2?.setText(distance)\r\n                        to_loc?.setText(to_location)\r\n                        from_loc?.setText(from_location)\r\n                        fare?.setText(\"Approx.. fare Rs. \"+ min_price +\" to \"+ max_price +\",\\n                for this ride\\nwithout waiting  parking charge\\nFinal Price is differ from Approx. \"\r\n\r\n                        )\r\n\r\n\r\n                    }\r\n                    // Get your json response and convert it to whatever you want.\r\n                }\r\n            }, object : Response.ErrorListener {\r\n                override fun onErrorResponse(error: VolleyError?) {\r\n                    Log.d(\"SendData\", \"error===\" + error)\r\n                    Toast.makeText(requireActivity(), \"Something went wrong!\", Toast.LENGTH_LONG).show()\r\n\r\n                }\r\n            }) {\r\n                @SuppressLint(\"SuspiciousIndentation\")\r\n                @Throws(AuthFailureError::class)\r\n                override fun getHeaders(): Map<String, String> {\r\n                    val headers: MutableMap<String, String> = HashMap()\r\n                    headers.put(\"Content-Type\", \"application/json; charset=UTF-8\");\r\n                    headers.put(\"Authorization\", \"Bearer \" + pref.getToken());\r\n                    headers.put(\"Accept\", \"application/vnd.api+json\");\r\n                    return headers\r\n                }\r\n            }\r\n\r\n        queue.add(jsonOblect)\r\n\r\n    }\r\n    /*override fun onPaymentSuccess(s: String?) {\r\n        Toast.makeText(requireActivity(), \"payment successful\", Toast.LENGTH_SHORT).show()\r\n        //  startActivity(Intent(requireActivity(), UOrderPlaced::class.java))\r\n        view?.let { Navigation.findNavController(it).navigate(R.id.thankyouScreenFragment) }\r\n        try {\r\n            transaction_id = s\r\n            getOtp()\r\n            val c: Calendar = Calendar.getInstance()\r\n            @SuppressLint(\"SimpleDateFormat\") val dateformat =\r\n                SimpleDateFormat(\"dd-MMM-yyyy hh:mm:ss aa\")\r\n            val currentTime: String = dateformat.format(c.getTime())\r\n            //  Log.d(\"transaction_id\", transaction_id)\r\n            /*sendorderdetails(\r\n                transaction_id,\r\n                order_id,\r\n                java.lang.String.valueOf(total_samount),\r\n                1,\r\n                currentTime\r\n            )*/\r\n        } catch (e: Exception) {\r\n            //  Log.e(TAG, \"Exception in onPaymentSuccess\", e)\r\n        }\r\n    }\r\n    override fun onPaymentError(i: Int, s: String?) {\r\n        try {\r\n            Toast.makeText(requireActivity(), \"Payment failed$i\", Toast.LENGTH_SHORT).show()\r\n            val c: Calendar = Calendar.getInstance()\r\n            @SuppressLint(\"SimpleDateFormat\") val dateformat =\r\n                SimpleDateFormat(\"dd-MMM-yyyy hh:mm:ss aa\")\r\n            val currentTime: String = dateformat.format(c.getTime())\r\n            // sendorderdetails(\"0\", order_id, java.lang.String.valueOf(total_samount), 0, currentTime)\r\n        } catch (e: Exception) {\r\n            //Log.e(TAG, \"Exception in onPaymentError\", e)\r\n        }\r\n    }*/\r\n\r\n\r\n\r\n\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/com/pearlorganisation/figgo/UI/Fragments/CabBookFragment.kt b/app/src/main/java/com/pearlorganisation/figgo/UI/Fragments/CabBookFragment.kt
--- a/app/src/main/java/com/pearlorganisation/figgo/UI/Fragments/CabBookFragment.kt	(revision fab82203368abdd7a031ee01b2b3cd09d54de347)
+++ b/app/src/main/java/com/pearlorganisation/figgo/UI/Fragments/CabBookFragment.kt	(date 1673933999777)
@@ -73,7 +73,7 @@
         to_loc = view.findViewById<TextView>(R.id.to_loc)
         from_loc = view.findViewById<TextView>(R.id.from_loc)
         fare = view.findViewById<TextView>(R.id.fare)
-      //  image = view.findViewById<ImageView>(R.id.image)
+    //    image = view.findViewById<ImageView>(R.id.image)
 
         pref = PrefManager(requireActivity())
 
@@ -86,7 +86,7 @@
             Navigation.findNavController(view).navigate(R.id.action_cabBookFragment_to_payFragment)
 
 
-           // startActivity(Intent(requireActivity(), PaymentPayActivity::class.java))
+            // startActivity(Intent(requireActivity(), PaymentPayActivity::class.java))
 
 
         }
@@ -200,7 +200,7 @@
                         val from_location = response.getJSONObject("data").getJSONObject("ride").getJSONObject("from_location").getString("name")
 
 
-                      //  Picasso.get().load(full_image).into(image)
+                        //  Picasso.get().load(full_image).into(image)
                         created_at?.setText(createdAt)
                         updated_at?.setText(updatedAt)
                         dis1?.setText(distance)
@@ -228,7 +228,6 @@
                     val headers: MutableMap<String, String> = HashMap()
                     headers.put("Content-Type", "application/json; charset=UTF-8");
                     headers.put("Authorization", "Bearer " + pref.getToken());
-                    headers.put("Accept", "application/vnd.api+json");
                     return headers
                 }
             }
Index: app/src/main/java/com/pearlorganisation/figgo/Adapter/AdvanceCityDataAdapter.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.pearlorganisation.figgo.Adapter\r\n\r\nimport android.annotation.SuppressLint\r\nimport android.app.Activity\r\nimport android.content.Intent\r\nimport android.view.LayoutInflater\r\nimport android.view.View\r\nimport android.view.ViewGroup\r\nimport android.widget.ImageView\r\nimport android.widget.LinearLayout\r\nimport android.widget.TextView\r\nimport androidx.recyclerview.widget.RecyclerView.Adapter\r\nimport androidx.recyclerview.widget.RecyclerView.ViewHolder\r\nimport com.pearlorganisation.PrefManager\r\nimport com.pearlorganisation.figgo.Model.AdvanceCityCabModel\r\nimport com.pearlorganisation.figgo.R\r\nimport com.pearlorganisation.figgo.UI.CabDetailsActivity\r\nimport com.squareup.picasso.Picasso\r\n\r\n\r\nclass AdvanceCityDataAdapter(var context:Activity, var cablist:List<AdvanceCityCabModel>): Adapter<AdvanceCityDataAdapter.AdvanceCityHolder>() {\r\n    lateinit var pref: PrefManager\r\n    var row_index = -1\r\n    class AdvanceCityHolder(itemview: View):ViewHolder(itemview)\r\n    {\r\n        var cab=itemview.findViewById<ImageView>(R.id.cab)\r\n        var ratings=itemview.findViewById<TextView>(R.id.rating)\r\n        var min=itemview.findViewById<TextView>(R.id.min)\r\n        var max=itemview.findViewById<TextView>(R.id.max)\r\n        var linear=itemview.findViewById<LinearLayout>(R.id.linear)\r\n    }\r\n\r\n        override fun onCreateViewHolder(parent: ViewGroup, viewType: Int): AdvanceCityHolder {\r\n        return AdvanceCityHolder(LayoutInflater.from(parent.context).inflate(R.layout.city_cab_layout,parent,false))\r\n    }\r\n\r\n\r\n    @SuppressLint(\"ResourceAsColor\")\r\n    override fun onBindViewHolder(holder: AdvanceCityHolder, position: Int) {\r\n        pref = PrefManager(context)\r\n     var data=cablist[position]\r\n      //  holder.cab.setImageResource(data.cab)\r\n        holder.ratings.text=data.name\r\n        holder.min.text=data.min\r\n        holder.max.text=data.max\r\n        Picasso.get().load(data.image).into(holder.cab)\r\n\r\n        holder.itemView.setOnClickListener {\r\n\r\n           pref.setride_id(data.rideId)\r\n            pref.setVehicleId(data.vehicleId)\r\n            row_index = position\r\n            notifyDataSetChanged()\r\n            context.startActivity(Intent(context, CabDetailsActivity::class.java))\r\n           }\r\n\r\n        if (row_index === position) {\r\n            holder.linear.setBackgroundColor(R.color.colorcoffie)\r\n\r\n        }\r\n\r\n\r\n    }\r\n\r\n    override fun getItemCount(): Int {\r\n       return cablist.size\r\n    }\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/com/pearlorganisation/figgo/Adapter/AdvanceCityDataAdapter.kt b/app/src/main/java/com/pearlorganisation/figgo/Adapter/AdvanceCityDataAdapter.kt
--- a/app/src/main/java/com/pearlorganisation/figgo/Adapter/AdvanceCityDataAdapter.kt	(revision fab82203368abdd7a031ee01b2b3cd09d54de347)
+++ b/app/src/main/java/com/pearlorganisation/figgo/Adapter/AdvanceCityDataAdapter.kt	(date 1673933999908)
@@ -47,7 +47,7 @@
 
         holder.itemView.setOnClickListener {
 
-           pref.setride_id(data.rideId)
+           pref.setRideId(data.rideId)
             pref.setVehicleId(data.vehicleId)
             row_index = position
             notifyDataSetChanged()
Index: app/src/main/java/com/pearlorganisation/figgo/Adapter/CurrentOneWayKmCountAdapter.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.pearlorganisation.figgo.Adapter\r\n\r\nimport android.content.Context\r\nimport android.content.Intent\r\nimport android.util.Log\r\nimport android.view.LayoutInflater\r\nimport android.view.View\r\nimport android.view.ViewGroup\r\nimport android.widget.LinearLayout\r\nimport android.widget.TextView\r\nimport android.widget.Toast\r\nimport androidx.recyclerview.widget.RecyclerView\r\nimport com.android.volley.AuthFailureError\r\nimport com.android.volley.DefaultRetryPolicy\r\nimport com.android.volley.Response\r\nimport com.android.volley.VolleyError\r\nimport com.android.volley.toolbox.JsonObjectRequest\r\nimport com.android.volley.toolbox.Volley\r\nimport com.pearlorganisation.PrefManager\r\nimport com.pearlorganisation.figgo.CurrentMap.EmergencyMapsActivity\r\nimport com.pearlorganisation.figgo.CurrentMap.MapsActivity1\r\nimport com.pearlorganisation.figgo.CurrentMap.MapsActivity2\r\nimport com.pearlorganisation.figgo.Model.OneWayListRatingVehicle\r\nimport com.pearlorganisation.figgo.R\r\nimport org.json.JSONObject\r\n\r\nclass CurrentOneWayKmCountAdapter(var context: Context, private val mList: List<OneWayListRatingVehicle>) : RecyclerView.Adapter<CurrentOneWayKmCountAdapter.ViewHolder>() {\r\n\r\n    lateinit var pref: PrefManager\r\n    \r\n   /* var onItemClick : ((OneWayListRatingVehicle) -> Unit)? = null*/\r\n\r\n\r\n    override fun onCreateViewHolder(parent: ViewGroup, viewType: Int): CurrentOneWayKmCountAdapter.ViewHolder {\r\n\r\n        val view = LayoutInflater.from(parent.context).inflate(R.layout.oneway_count_list, parent, false)\r\n        return ViewHolder(view)\r\n    }\r\n\r\n    override fun onBindViewHolder(holder: CurrentOneWayKmCountAdapter.ViewHolder, position: Int) {\r\n        pref = PrefManager(context)\r\n        val OneWayListRatingVehicle = mList[position]\r\n\r\n        holder.vehicleprice.text = mList.get(position).price\r\n        holder.vehiclname.text = mList.get(position).name\r\n        holder.vehiclemodel.text = mList.get(position).year\r\n        holder.rating.text = mList.get(position).rating\r\n\r\n        holder.itemView.setOnClickListener {\r\n            context.startActivity(Intent(context, MapsActivity2::class.java))\r\n        }\r\n\r\n        holder.acceptbutton.setOnClickListener {\r\n            Toast.makeText(context,\"Accepted Driver\",Toast.LENGTH_SHORT).show()\r\n\r\n            val URL = \"https://test.pearl-developer.com/figo/api/ride/select-driver\"\r\n           // Log.d(\"SendData\", \"URL===\" + URL)\r\n            val queue = Volley.newRequestQueue(context)\r\n            val json = JSONObject()\r\n            json.put(\"ride_id\",pref.getride_id())\r\n            json.put(\"driver_id\",pref.getdriver_id())\r\n            json.put(\"price\",pref.getprice())\r\n            Log.d(\"SendData\", \"pref.getToken()===\" + pref.getToken())\r\n            Log.d(\"SendData\", \"json===\" + json)\r\n            val jsonOblect: JsonObjectRequest = object : JsonObjectRequest(Method.POST, URL, json, object :\r\n                Response.Listener<JSONObject?>               {\r\n                override fun onResponse(response: JSONObject?) {\r\n                    Log.d(\"SendData\", \"response===\" + response)\r\n                    if (response != null) {\r\n                        val status = response.getString(\"status\")\r\n                        if(status.equals(\"false\")){\r\n                            Toast.makeText(context, \"Something Went Wrong!\", Toast.LENGTH_LONG).show()\r\n                        }else{\r\n\r\n\r\n\r\n                        }\r\n                    }\r\n\r\n                }\r\n            }, object : Response.ErrorListener {\r\n                override fun onErrorResponse(error: VolleyError?) {\r\n                    Log.d(\"SendData\", \"error===\" + error)\r\n                    Toast.makeText(context, \"Something Went Wrong!\", Toast.LENGTH_LONG).show()\r\n                }\r\n            }) {\r\n                @Throws(AuthFailureError::class)\r\n                override fun getHeaders(): Map<String, String> {\r\n                    val headers: MutableMap<String, String> = java.util.HashMap()\r\n                    headers.put(\"Content-Type\", \"application/json; charset=UTF-8\")\r\n                    headers.put(\"Authorization\", \"Bearer \" + pref.getToken())\r\n                    headers.put(\"Accept\", \"application/vnd.api+json\");\r\n                    return headers\r\n                }\r\n            }\r\n            jsonOblect.setRetryPolicy(DefaultRetryPolicy(10000, DefaultRetryPolicy.DEFAULT_MAX_RETRIES, DefaultRetryPolicy.DEFAULT_BACKOFF_MULT))\r\n\r\n            queue.add(jsonOblect)\r\n\r\n\r\n        context.startActivity(Intent(context, EmergencyMapsActivity::class.java))\r\n\r\n\r\n        }\r\n\r\n        holder.reject.setOnClickListener {\r\n           Toast.makeText(context,\"Rejected\",Toast.LENGTH_SHORT).show()\r\n        }\r\n\r\n        pref.setride_id(OneWayListRatingVehicle.ride_id)\r\n        pref.setdriver_id(OneWayListRatingVehicle.driver_id)\r\n        pref.setprice(OneWayListRatingVehicle.price)\r\n\r\n    }\r\n\r\n    override fun getItemCount(): Int {\r\n        return mList.size\r\n    }\r\n\r\n    class ViewHolder(ItemView: View) : RecyclerView.ViewHolder(ItemView){\r\n        var vehiclname:TextView = itemView.findViewById(R.id.vehiclname)\r\n        var vehiclemodel:TextView = itemView.findViewById(R.id.vehiclemodel)\r\n        var vehicleprice:TextView = itemView.findViewById(R.id.vehicleprice)\r\n        var acceptbutton:TextView = itemView.findViewById(R.id.acceptbutton)\r\n        var reject:TextView = itemView.findViewById(R.id.reject)\r\n        val rating:TextView = itemView.findViewById(R.id.rating)\r\n        val ll_main:LinearLayout = itemView.findViewById(R.id.ll_main)\r\n\r\n    }\r\n\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/com/pearlorganisation/figgo/Adapter/CurrentOneWayKmCountAdapter.kt b/app/src/main/java/com/pearlorganisation/figgo/Adapter/CurrentOneWayKmCountAdapter.kt
--- a/app/src/main/java/com/pearlorganisation/figgo/Adapter/CurrentOneWayKmCountAdapter.kt	(revision fab82203368abdd7a031ee01b2b3cd09d54de347)
+++ b/app/src/main/java/com/pearlorganisation/figgo/Adapter/CurrentOneWayKmCountAdapter.kt	(date 1673933999830)
@@ -57,7 +57,7 @@
            // Log.d("SendData", "URL===" + URL)
             val queue = Volley.newRequestQueue(context)
             val json = JSONObject()
-            json.put("ride_id",pref.getride_id())
+            json.put("ride_id",pref.getRideId())
             json.put("driver_id",pref.getdriver_id())
             json.put("price",pref.getprice())
             Log.d("SendData", "pref.getToken()===" + pref.getToken())
@@ -107,7 +107,7 @@
            Toast.makeText(context,"Rejected",Toast.LENGTH_SHORT).show()
         }
 
-        pref.setride_id(OneWayListRatingVehicle.ride_id)
+        pref.setRideId(OneWayListRatingVehicle.ride_id)
         pref.setdriver_id(OneWayListRatingVehicle.driver_id)
         pref.setprice(OneWayListRatingVehicle.price)
 
